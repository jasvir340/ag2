"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3107],{95497:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var a=t(74848),s=t(28453);const r={custom_edit_url:"https://github.com/ag2ai/ag2/edit/main/website/docs/topics/swarm.ipynb",source_notebook:"/website/docs/topics/swarm.ipynb",title:"Swarm Orchestration"},o="Swarm Orchestration",i={id:"topics/swarm",title:"Swarm Orchestration",description:"Open In Colab",source:"@site/docs/topics/swarm.mdx",sourceDirName:"topics",slug:"/topics/swarm",permalink:"/ag2/docs/topics/swarm",draft:!1,unlisted:!1,editUrl:"https://github.com/ag2ai/ag2/edit/main/website/docs/topics/swarm.ipynb",tags:[],version:"current",frontMatter:{custom_edit_url:"https://github.com/ag2ai/ag2/edit/main/website/docs/topics/swarm.ipynb",source_notebook:"/website/docs/topics/swarm.ipynb",title:"Swarm Orchestration"},sidebar:"docsSidebar",previous:{title:"Retrieval Augmentation",permalink:"/ag2/docs/topics/retrieval_augmentation"},next:{title:"Task Decomposition",permalink:"/ag2/docs/topics/task_decomposition"}},c={},l=[{value:"Components",id:"components",level:2},{value:"Create a <code>SwarmAgent</code>",id:"create-a-swarmagent",level:3},{value:"Registering Handoffs to agents",id:"registering-handoffs-to-agents",level:3},{value:"Registering Handoffs to a nested chat",id:"registering-handoffs-to-a-nested-chat",level:3},{value:"AFTER_WORK",id:"after_work",level:3},{value:"Update Agent state before replying",id:"update-agent-state-before-replying",level:3},{value:"Initialize SwarmChat with <code>initiate_swarm_chat</code>",id:"initialize-swarmchat-with-initiate_swarm_chat",level:3},{value:"Q&amp;As",id:"qas",level:2},{value:"Demonstration",id:"demonstration",level:2},{value:"Create Swarm Agents",id:"create-swarm-agents",level:3},{value:"Start Chat",id:"start-chat",level:3},{value:"Demo with User Agent",id:"demo-with-user-agent",level:3}];function h(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"swarm-orchestration",children:"Swarm Orchestration"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://colab.research.google.com/github/ag2ai/ag2/blob/main/website/docs/topics/swarm.ipynb",children:(0,a.jsx)(n.img,{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})}),"\n",(0,a.jsx)(n.a,{href:"https://github.com/ag2ai/ag2/blob/main/website/docs/topics/swarm.ipynb",children:(0,a.jsx)(n.img,{src:"https://img.shields.io/badge/Open%20on%20GitHub-grey?logo=github",alt:"Open on GitHub"})})]}),"\n",(0,a.jsxs)(n.p,{children:["With AG2, you can initiate a Swarm Chat similar to OpenAI\u2019s\n",(0,a.jsx)(n.a,{href:"https://github.com/openai/swarm",children:"Swarm"}),". This orchestration offers two\nmain features:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Headoffs"}),": Agents can transfer control to another agent via\nfunction calls, enabling smooth transitions within workflows."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Context Variables"}),": Agents can dynamically update shared\nvariables through function calls, maintaining context and\nadaptability throughout the process."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Instead of sending a task to a single LLM agent, you can assign it to a\nswarm of agents. Each agent in the swarm can decide whether to hand off\nthe task to another agent. The chat terminates when the last active\nagent\u2019s response is a plain string (i.e., it doesn\u2019t suggest a tool call\nor handoff)."}),"\n",(0,a.jsx)(n.h2,{id:"components",children:"Components"}),"\n",(0,a.jsx)(n.p,{children:"We now introduce the main components that need to be used to create a\nswarm chat."}),"\n",(0,a.jsxs)(n.h3,{id:"create-a-swarmagent",children:["Create a ",(0,a.jsx)(n.code,{children:"SwarmAgent"})]}),"\n",(0,a.jsxs)(n.p,{children:["All the agents passed to the swarm chat should be instances of\n",(0,a.jsx)(n.code,{children:"SwarmAgent"}),". ",(0,a.jsx)(n.code,{children:"SwarmAgent"})," is very similar to ",(0,a.jsx)(n.code,{children:"AssistantAgent"}),", but it\nhas some additional features to support function registration and\nhandoffs. When creating a ",(0,a.jsx)(n.code,{children:"SwarmAgent"}),", you can pass in a list of\nfunctions. These functions will be converted to schemas to be passed to\nthe LLMs, and you don\u2019t need to worry about registering the functions\nfor execution. You can also pass back a ",(0,a.jsx)(n.code,{children:"SwarmResult"})," class, where you\ncan return a value, the next agent to call, and update context variables\nat the same time."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Notes for creating the function calls"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["For input arguments, you must define the type of the argument,\notherwise, the registration will fail (e.g.\xa0",(0,a.jsx)(n.code,{children:"arg_name: str"}),")."]}),"\n",(0,a.jsxs)(n.li,{children:["If your function requires access or modification of the context\nvariables, you must pass in ",(0,a.jsx)(n.code,{children:"context_variables: dict"})," as one argument.\nThis argument will not be visible to the LLM (removed when registering\nthe function schema). But when called, the global context variables will\nbe passed in by the swarm chat."]}),"\n",(0,a.jsx)(n.li,{children:"The docstring of the function will be used as the prompt. So make sure\nto write a clear description."}),"\n",(0,a.jsx)(n.li,{children:"The function name will be used as the tool name."}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"registering-handoffs-to-agents",children:"Registering Handoffs to agents"}),"\n",(0,a.jsxs)(n.p,{children:["While you can create a function to decide what next agent to call, we\nprovide a quick way to register the handoff using ",(0,a.jsx)(n.code,{children:"ON_CONDITION"}),". We\nwill craft this transition function and add it to the LLM config\ndirectly."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'agent_2 = SwarmAgent(...)\nagent_3 = SwarmAgent(...)\n\n# Register the handoff\nagent_1 = SwarmAgent(...)\nagent_1.handoff(hand_to=[ON_CONDITION(agent_2, "condition_1"), ON_CONDITION(agent_3, "condition_2")])\n\n# This is equivalent to:\ndef transfer_to_agent_2():\n    """condition_1"""\n    return agent_2\n\ndef transfer_to_agent_3():\n    """condition_1"""\n    return agent_3\n    \nagent_1 = SwarmAgent(..., functions=[transfer_to_agent_2, transfer_to_agent_3])\n# You can also use agent_1.add_functions to add more functions after initialization\n'})}),"\n",(0,a.jsx)(n.h3,{id:"registering-handoffs-to-a-nested-chat",children:"Registering Handoffs to a nested chat"}),"\n",(0,a.jsxs)(n.p,{children:["In addition to transferring to an agent, you can also trigger a nested\nchat by doing a handoff and using ",(0,a.jsx)(n.code,{children:"ON_CONDITION"}),". This is a useful way\nto perform sub-tasks without that work becoming part of the broader\nswarm\u2019s messages."]}),"\n",(0,a.jsxs)(n.p,{children:["Configuring the nested chat is similar to ",(0,a.jsx)(n.a,{href:"https://ag2ai.github.io/ag2/docs/tutorial/conversation-patterns#nested-chats",children:"establishing a nested chat\nfor an\nagent"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Nested chats are a set of sequential chats and these are defined like\nso:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'nested_chats = [\n    {\n        "recipient": my_first_agent,\n        "summary_method": "reflection_with_llm",\n        "summary_prompt": "Summarize the conversation into bullet points.",\n    },\n    {\n        "recipient": poetry_agent,\n        "message": "Write a poem about the context.",\n        "max_turns": 1,\n        "summary_method": "last_msg",\n    },\n]\n'})}),"\n",(0,a.jsxs)(n.p,{children:["New to nested chats within swarms is the ability to ",(0,a.jsx)(n.strong,{children:"carryover some\ncontext from the swarm chat into the nested chat"}),". This is done by\nadding a carryover configuration. If you\u2019re not using carryover, then no\nmessages from the swarm chat will be brought into the nested chat."]}),"\n",(0,a.jsx)(n.p,{children:"The carryover is applicable only to the first chat in the nested chats\nand works together with that nested chat\u2019s \u201cmessage\u201d value, if any."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'my_carryover_config = {\n    "summary_method": "reflection_with_llm",\n    "summary_args": {"summary_prompt": "Summarise the conversation into bullet points."}\n    }\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"summary_method"})," can be (with messages referring to the swarm chat\u2019s\nmessages):"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"all"'})," - messages will be converted to a new-line concatenated\nstring,\ne.g.\xa0",(0,a.jsx)(n.code,{children:"[first nested chat message]\\nContext: \\n[swarm message 1]\\n[swarm message 2]\\n..."})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"last_msg"'})," - the latest message will be added,\ne.g.\xa0",(0,a.jsx)(n.code,{children:"[first nested chat message]\\nContext: \\n[swarm's latest message]"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"reflection_with_llm"'})," - utilises an LLM to interpret the messages\nand its resulting response will be added,\ne.g.\xa0",(0,a.jsx)(n.code,{children:"[first nested chat message]\\nContext: \\n[llm response]"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"Callable"})," - a function that returns the full message (this will not\nconcatenate with the first nested chat\u2019s message, it will replace it\nentirely)."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["The signature of the ",(0,a.jsx)(n.code,{children:"summary_method"})," callable is:",(0,a.jsx)(n.br,{}),"\n",(0,a.jsx)(n.code,{children:"def my_method(agent: ConversableAgent, messages: List[Dict[str, Any]], summary_args: Dict) -> str:"})]}),"\n",(0,a.jsxs)(n.p,{children:["Both the \u201creflection_with_llm\u201d and Callable will be able to utilise the\n",(0,a.jsx)(n.code,{children:"summary_args"})," if they are included."]}),"\n",(0,a.jsx)(n.p,{children:"With your configuration available, you can add it to the first chat in\nthe nested chat:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'nested_chats = [\n    {\n        "recipient": my_first_agent,\n        "summary_method": "reflection_with_llm",\n        "summary_prompt": "Summarize the conversation into bullet points.",\n        "carryover_config": my_carryover_config,\n    },\n    {\n        "recipient": poetry_agent,\n        "message": "Write a poem about the context.",\n        "max_turns": 1,\n        "summary_method": "last_msg",\n    },\n]\n'})}),"\n",(0,a.jsx)(n.p,{children:"Finally, we add the nested chat as a handoff in the same way as we do to\nan agent:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'agent_1.handoff(\n    hand_to=[ON_CONDITION(\n        target={\n            "chat_queue":[nested_chats],\n            "config": Any,\n            "reply_func_from_nested_chats": None,\n            "use_async": False\n        },\n        condition="condition_1")\n        ]\n    )\n'})}),"\n",(0,a.jsxs)(n.p,{children:["See the documentation on ",(0,a.jsx)(n.a,{href:"https://ag2ai.github.io/ag2/docs/reference/agentchat/conversable_agent#register_nested_chats",children:"registering a nested\nchat"}),"\nfor further information on the parameters\n",(0,a.jsx)(n.code,{children:"reply_func_from_nested_chats"}),", ",(0,a.jsx)(n.code,{children:"use_async"}),", and ",(0,a.jsx)(n.code,{children:"config"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Once a nested chat is complete, the resulting output from the last chat\nin the nested chats will be returned as the agent that triggered the\nnested chat\u2019s response."}),"\n",(0,a.jsx)(n.h3,{id:"after_work",children:"AFTER_WORK"}),"\n",(0,a.jsxs)(n.p,{children:["When the last active agent\u2019s response doesn\u2019t suggest a tool call or\nhandoff, the chat will terminate by default. However, you can register\nan ",(0,a.jsx)(n.code,{children:"AFTER_WORK"})," handoff to define a fallback agent if you don\u2019t want the\nchat to end at this agent. At the swarm chat level, you also pass in an\n",(0,a.jsx)(n.code,{children:"AFTER_WORK"})," handoff to define the fallback mechanism for the entire\nchat. If this parameter is set for the agent and the chat, we will\nprioritize the agent\u2019s setting. There should only be one ",(0,a.jsx)(n.code,{children:"AFTER_WORK"}),".\nIf multiple ",(0,a.jsx)(n.code,{children:"AFTER_WORK"})," handoffs are passed, only the last one will be\nused."]}),"\n",(0,a.jsxs)(n.p,{children:["Besides fallback to an agent, we provide 3 ",(0,a.jsx)(n.code,{children:"AfterWorkOption"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"TERMINATE"}),": Terminate the chat"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"STAY"}),": Stay at the current agent"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"REVERT_TO_USER"}),": Revert to the user agent. Only if a user agent is\npassed in when initializing. (See below for more details)"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"agent_1 = SwarmAgent(...)\n\n# Register the handoff\nagent_1.handoff(hand_to=[\n ON_CONDITION(...), \n ON_CONDITION(...),\n AFTER_WORK(agent_4) # Fallback to agent_4 if no handoff is suggested\n])\n\nagent_2.handoff(hand_to=[AFTER_WORK(AfterWorkOption.TERMINATE)]) # Terminate the chat if no handoff is suggested\n"})}),"\n",(0,a.jsx)(n.h3,{id:"update-agent-state-before-replying",children:"Update Agent state before replying"}),"\n",(0,a.jsx)(n.p,{children:"It can be useful to update a swarm agent\u2019s state before they reply. For\nexample, using an agent\u2019s context variables you could change their\nsystem message based on the state of the workflow."}),"\n",(0,a.jsxs)(n.p,{children:["When initialising a swarm agent use the\n",(0,a.jsx)(n.code,{children:"update_agent_state_before_reply"})," parameter to register updates that run\nafter the agent is selected, but before they reply."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"update_agent_state_before_reply"})," takes a list of any combination of the\nfollowing (executing them in the provided order):"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"UPDATE_SYSTEM_MESSAGE"})," provides a simple way to update the agent\u2019s\nsystem message via an f-string that substitutes the values of\ncontext variables, or a Callable that returns a string"]}),"\n",(0,a.jsxs)(n.li,{children:["Callable with two parameters of type ",(0,a.jsx)(n.code,{children:"ConversableAgent"})," for the\nagent and ",(0,a.jsx)(n.code,{children:"List[Dict[str Any]]"})," for the messages, and does not\nreturn a value"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Below is an example of setting these up when creating a Swarm agent."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Creates a system message string\ndef create_system_prompt_function(my_agent: ConversableAgent, messages: List[Dict[]]) -> str:\n    preferred_name = my_agent.get_context("preferred_name", "(name not provided)")\n\n    # Note that the returned string will be treated like an f-string using the context variables\n    return "You are a customer service representative helping a customer named "\n    + preferred_name\n    + " and their passport number is \'{passport_number}\'."\n\n# Function to update an Agent\'s state\ndef my_callable_state_update_function(my_agent: ConversableAgent, messages: List[Dict[]]) -> None:\n    agent.set_context("context_key", 43)\n    agent.update_system_message("You are a customer service representative.")\n\n# Create the SwarmAgent and set agent updates\ncustomer_service = SwarmAgent(\n    name="CustomerServiceRep",\n    system_message="You are a customer service representative.",\n    update_agent_state_before_reply=[\n        UPDATE_SYSTEM_MESSAGE("You are a customer service representative. Quote passport number \'{passport_number}\'"),\n        UPDATE_SYSTEM_MESSAGE(create_system_prompt_function),\n        my_callable_state_update_function]\n    ...\n)\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"initialize-swarmchat-with-initiate_swarm_chat",children:["Initialize SwarmChat with ",(0,a.jsx)(n.code,{children:"initiate_swarm_chat"})]}),"\n",(0,a.jsxs)(n.p,{children:["After a set of swarm agents are created, you can initiate a swarm chat\nby calling ",(0,a.jsx)(n.code,{children:"initiate_swarm_chat"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'chat_history, context_variables, last_active_agent = initiate_swarm_chat(\n    initial_agent=agent_1, # the first agent to start the chat\n    agents=[agent_1, agent_2, agent_3], # a list of agents\n    messages=[{"role": "user", "content": "Hello"}], # a list of messages to start the chat, you can also pass in one string\n    user_agent=user_agent, # optional, if you want to revert to the user agent\n    context_variables={"key": "value"} # optional, initial context variables\n)\n'})}),"\n",(0,a.jsx)(n.p,{children:"How we handle messages:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Case 1: If you pass in one single message"}),"\n",(0,a.jsx)(n.li,{children:"If there is a name in that message, we will assume this message is\nfrom that agent. (It will be error if that name doesn\u2019t match any agent\nyou passed in.)"}),"\n",(0,a.jsx)(n.li,{children:"If there is no name, 1. User agent passed in: we assume this message\nis from the user agent. 2. No user agent passed in: we will create a\ntemporary user agent just to start the chat."}),"\n",(0,a.jsxs)(n.li,{children:["Case 2: We will use the ",(0,a.jsx)(n.a,{href:"https://ag2ai.github.io/ag2/docs/topics/groupchat/resuming_groupchat",children:"Resume\nGroupChat"}),"\nfeature to resume the chat. The ",(0,a.jsx)(n.code,{children:"name"})," fields in these messages must be\none of the names of the agents you passed in, otherwise, it will be an\nerror."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"qas",children:"Q&As"}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"How are context variables updated?"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["In a swarm, the context variables are shared amongst Swarm agents. As\ncontext variables are available at the agent level, you can use the\ncontext variable getters/setters on the agent to view and change the\nshared context variables. If you\u2019re working with a function that returns\na ",(0,a.jsx)(n.code,{children:"SwarmResult"})," you should update the passed in context variables and\nreturn it in the ",(0,a.jsx)(n.code,{children:"SwarmResult"}),", this will ensure the shared context is\nupdated."]}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"What is the difference between ON_CONDITION and AFTER_WORK?"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"When registering an ON_CONDITION handoff, we are creating a function\nschema to be passed to the LLM. The LLM will decide whether to call this\nfunction."}),"\n",(0,a.jsx)(n.p,{children:"When registering an AFTER_WORK handoff, we are defining the fallback\nmechanism when no tool calls are suggested. This is a higher level of\ncontrol from the swarm chat level."}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"When to pass in a user agent?"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"If your application requires interactions with the user, you can pass in\na user agent to the groupchat, so that don\u2019t need to write an outer loop\nto accept user inputs and call swarm."}),"\n",(0,a.jsx)(n.h2,{id:"demonstration",children:"Demonstration"}),"\n",(0,a.jsx)(n.h3,{id:"create-swarm-agents",children:"Create Swarm Agents"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import autogen\n\nconfig_list = autogen.config_list_from_json(...)\nllm_config = {"config_list": config_list}\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import random\n\nfrom autogen import (\n    AFTER_WORK,\n    ON_CONDITION,\n    AfterWorkOption,\n    SwarmAgent,\n    SwarmResult,\n    initiate_swarm_chat,\n)\n\n\n# 1. A function that returns a value of "success" and updates the context variable "1" to True\ndef update_context_1(context_variables: dict) -> SwarmResult:\n    context_variables["1"] = True\n    return SwarmResult(value="success", context_variables=context_variables)\n\n\n# 2. A function that returns an SwarmAgent object\ndef transfer_to_agent_2() -> SwarmAgent:\n    """Transfer to agent 2"""\n    return agent_2\n\n\n# 3. A function that returns the value of "success", updates the context variable and transfers to agent 3\ndef update_context_2_and_transfer_to_3(context_variables: dict) -> SwarmResult:\n    context_variables["2"] = True\n    return SwarmResult(value="success", context_variables=context_variables, agent=agent_3)\n\n\n# 4. A function that returns a normal value\ndef get_random_number() -> str:\n    return random.randint(1, 100)\n\n\ndef update_context_3_with_random_number(context_variables: dict, random_number: int) -> SwarmResult:\n    context_variables["3"] = random_number\n    return SwarmResult(value="success", context_variables=context_variables)\n\n\nagent_1 = SwarmAgent(\n    name="Agent_1",\n    system_message="You are Agent 1, first, call the function to update context 1, and transfer to Agent 2",\n    llm_config=llm_config,\n    functions=[update_context_1, transfer_to_agent_2],\n)\n\nagent_2 = SwarmAgent(\n    name="Agent_2",\n    system_message="You are Agent 2, call the function that updates context 2 and transfer to Agent 3",\n    llm_config=llm_config,\n    functions=[update_context_2_and_transfer_to_3],\n)\n\nagent_3 = SwarmAgent(\n    name="Agent_3",\n    system_message="You are Agent 3, tell a joke",\n    llm_config=llm_config,\n)\n\nagent_4 = SwarmAgent(\n    name="Agent_4",\n    system_message="You are Agent 4, call the function to get a random number",\n    llm_config=llm_config,\n    functions=[get_random_number],\n)\n\nagent_5 = SwarmAgent(\n    name="Agent_5",\n    system_message="Update context 3 with the random number.",\n    llm_config=llm_config,\n    functions=[update_context_3_with_random_number],\n)\n\n\n# This is equivalent to writing a transfer function\nagent_3.register_hand_off(ON_CONDITION(agent_4, "Transfer to Agent 4"))\n\nagent_4.register_hand_off([AFTER_WORK(agent_5)])\n\nprint("Agent 1 function schema:")\nfor func_schema in agent_1.llm_config["tools"]:\n    print(func_schema)\n\nprint("Agent 3 function schema:")\nfor func_schema in agent_3.llm_config["tools"]:\n    print(func_schema)\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"Agent 1 function schema:\n{'type': 'function', 'function': {'description': '', 'name': 'update_context_1', 'parameters': {'type': 'object', 'properties': {}}}}\n{'type': 'function', 'function': {'description': 'Transfer to agent 2', 'name': 'transfer_to_agent_2', 'parameters': {'type': 'object', 'properties': {}}}}\nAgent 3 function schema:\n{'type': 'function', 'function': {'description': 'Transfer to Agent 4', 'name': 'transfer_to_Agent_4', 'parameters': {'type': 'object', 'properties': {}}}}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"start-chat",children:"Start Chat"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'context_variables = {"1": False, "2": False, "3": False}\nchat_result, context_variables, last_agent = initiate_swarm_chat(\n    initial_agent=agent_1,\n    agents=[agent_1, agent_2, agent_3, agent_4, agent_5],\n    messages="start",\n    context_variables=context_variables,\n    after_work=AFTER_WORK(AfterWorkOption.TERMINATE),  # this is the default\n)\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:'_User (to chat_manager):\n\nstart\n\n--------------------------------------------------------------------------------\n\nNext speaker: Agent_1\n\nAgent_1 (to chat_manager):\n\n***** Suggested tool call (call_kfcEAY2IeRZww06CQN7lbxOf): update_context_1 *****\nArguments: \n{}\n*********************************************************************************\n***** Suggested tool call (call_izl5eyV8IQ0Wg6XY2SaR1EJM): transfer_to_agent_2 *****\nArguments: \n{}\n************************************************************************************\n\n--------------------------------------------------------------------------------\n\nNext speaker: Tool_Execution\n\n\n>>>>>>>> EXECUTING FUNCTION update_context_1...\n\n>>>>>>>> EXECUTING FUNCTION transfer_to_agent_2...\nTool_Execution (to chat_manager):\n\n***** Response from calling tool (call_kfcEAY2IeRZww06CQN7lbxOf) *****\n\n**********************************************************************\n\n--------------------------------------------------------------------------------\n***** Response from calling tool (call_izl5eyV8IQ0Wg6XY2SaR1EJM) *****\nSwarmAgent --\x3e Agent_2\n**********************************************************************\n\n--------------------------------------------------------------------------------\n\nNext speaker: Agent_2\n\nAgent_2 (to chat_manager):\n\n***** Suggested tool call (call_Yf5DTGaaYkA726ubnfJAvQMq): update_context_2_and_transfer_to_3 *****\nArguments: \n{}\n***************************************************************************************************\n\n--------------------------------------------------------------------------------\n\nNext speaker: Tool_Execution\n\n\n>>>>>>>> EXECUTING FUNCTION update_context_2_and_transfer_to_3...\nTool_Execution (to chat_manager):\n\n***** Response from calling tool (call_Yf5DTGaaYkA726ubnfJAvQMq) *****\n\n**********************************************************************\n\n--------------------------------------------------------------------------------\n\nNext speaker: Agent_3\n\nAgent_3 (to chat_manager):\n\n***** Suggested tool call (call_jqZNHuMtQYeNh5Mq4pV2uwAj): transfer_to_Agent_4 *****\nArguments: \n{}\n************************************************************************************\n\n--------------------------------------------------------------------------------\n\nNext speaker: Tool_Execution\n\n\n>>>>>>>> EXECUTING FUNCTION transfer_to_Agent_4...\nTool_Execution (to chat_manager):\n\n***** Response from calling tool (call_jqZNHuMtQYeNh5Mq4pV2uwAj) *****\nSwarmAgent --\x3e Agent_4\n**********************************************************************\n\n--------------------------------------------------------------------------------\n\nNext speaker: Agent_4\n\nAgent_4 (to chat_manager):\n\n***** Suggested tool call (call_KeNGv98klvDZsrAX10Ou3I71): get_random_number *****\nArguments: \n{}\n**********************************************************************************\n\n--------------------------------------------------------------------------------\n\nNext speaker: Tool_Execution\n\n\n>>>>>>>> EXECUTING FUNCTION get_random_number...\nTool_Execution (to chat_manager):\n\n***** Response from calling tool (call_KeNGv98klvDZsrAX10Ou3I71) *****\n27\n**********************************************************************\n\n--------------------------------------------------------------------------------\n\nNext speaker: Agent_4\n\nAgent_4 (to chat_manager):\n\nThe random number generated is 27.\n\n--------------------------------------------------------------------------------\n\nNext speaker: Agent_5\n\nAgent_5 (to chat_manager):\n\n***** Suggested tool call (call_MlSGNNktah3m3QGssWBEzxCe): update_context_3_with_random_number *****\nArguments: \n{"random_number":27}\n****************************************************************************************************\n\n--------------------------------------------------------------------------------\n\nNext speaker: Tool_Execution\n\n\n>>>>>>>> EXECUTING FUNCTION update_context_3_with_random_number...\nTool_Execution (to chat_manager):\n\n***** Response from calling tool (call_MlSGNNktah3m3QGssWBEzxCe) *****\n\n**********************************************************************\n\n--------------------------------------------------------------------------------\n\nNext speaker: Agent_5\n\nAgent_5 (to chat_manager):\n\nThe random number 27 has been successfully updated in context 3.\n\n--------------------------------------------------------------------------------\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"print(context_variables)\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"{'1': True, '2': True, '3': 27}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"demo-with-user-agent",children:"Demo with User Agent"}),"\n",(0,a.jsxs)(n.p,{children:["We pass in a user agent to the swarm chat to accept user inputs. With\n",(0,a.jsx)(n.code,{children:"agent_6"}),", we register an ",(0,a.jsx)(n.code,{children:"AFTER_WORK"})," handoff to revert to the user\nagent when no tool calls are suggested."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from autogen import UserProxyAgent\n\nuser_agent = UserProxyAgent(name="User", code_execution_config=False)\n\nagent_6 = SwarmAgent(\n    name="Agent_6",\n    system_message="You are Agent 6. Your job is to tell jokes.",\n    llm_config=llm_config,\n)\n\nagent_7 = SwarmAgent(\n    name="Agent_7",\n    system_message="You are Agent 7, explain the joke.",\n    llm_config=llm_config,\n)\n\nagent_6.register_hand_off(\n    [\n        ON_CONDITION(\n            agent_7, "Used to transfer to Agent 7. Don\'t call this function, unless the user explicitly tells you to."\n        ),\n        AFTER_WORK(AfterWorkOption.REVERT_TO_USER),\n    ]\n)\n\nchat_result, _, _ = initiate_swarm_chat(\n    initial_agent=agent_6,\n    agents=[agent_6, agent_7],\n    user_agent=user_agent,\n    messages="start",\n)\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:'User (to chat_manager):\n\nstart\n\n--------------------------------------------------------------------------------\n\nNext speaker: Agent_6\n\nAgent_6 (to chat_manager):\n\nWhy did the scarecrow win an award? \n\nBecause he was outstanding in his field! \n\nWant to hear another one?\n\n--------------------------------------------------------------------------------\n\nNext speaker: User\n\nUser (to chat_manager):\n\nyes\n\n--------------------------------------------------------------------------------\n\nNext speaker: Agent_6\n\nAgent_6 (to chat_manager):\n\nWhy don\'t skeletons fight each other?\n\nThey don\'t have the guts! \n\nHow about another?\n\n--------------------------------------------------------------------------------\n\nNext speaker: User\n\nUser (to chat_manager):\n\ntransfer\n\n--------------------------------------------------------------------------------\n\nNext speaker: Agent_6\n\nAgent_6 (to chat_manager):\n\n***** Suggested tool call (call_gQ9leFamxgzQp8ZVQB8rUH73): transfer_to_Agent_7 *****\nArguments: \n{}\n************************************************************************************\n\n--------------------------------------------------------------------------------\n\nNext speaker: Tool_Execution\n\n\n>>>>>>>> EXECUTING FUNCTION transfer_to_Agent_7...\nTool_Execution (to chat_manager):\n\n***** Response from calling tool (call_gQ9leFamxgzQp8ZVQB8rUH73) *****\nSwarmAgent --\x3e Agent_7\n**********************************************************************\n\n--------------------------------------------------------------------------------\n\nNext speaker: Agent_7\n\nAgent_7 (to chat_manager):\n\nThe joke about the scarecrow winning an award is a play on words. It utilizes the term "outstanding," which can mean both exceptionally good (in the context of the scarecrow\'s performance) and literally being "standing out" in a field (where scarecrows are placed). So, the double meaning creates a pun that makes the joke humorous. \n\nThe skeleton joke works similarly. When it says skeletons "don\'t have the guts," it plays on the literal fact that skeletons don\'t have internal organs (guts), and metaphorically, "having guts" means having courage. The humor comes from this clever wordplay.\n\n--------------------------------------------------------------------------------\n'})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var a=t(96540);const s={},r=a.createContext(s);function o(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);