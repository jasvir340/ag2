"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[36788],{98097:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=t(74848),i=t(28453);const r={custom_edit_url:"https://github.com/ag2ai/ag2/edit/main/notebook/agentchat_swarm_graphrag_trip_planner.ipynb",description:"FalkorDB GraphRAG utilises a knowledge graph and can be added as a capability to agents. Together with a swarm orchestration of agents is highly effective at providing a RAG capability.",source_notebook:"/notebook/agentchat_swarm_graphrag_trip_planner.ipynb",tags:["RAG","tool/function","swarm"],title:"Trip planning with a FalkorDB GraphRAG agent using a Swarm"},o="Trip planning with a FalkorDB GraphRAG agent using a Swarm",s={id:"notebooks/agentchat_swarm_graphrag_trip_planner",title:"Trip planning with a FalkorDB GraphRAG agent using a Swarm",description:"FalkorDB GraphRAG utilises a knowledge graph and can be added as a capability to agents. Together with a swarm orchestration of agents is highly effective at providing a RAG capability.",source:"@site/docs/notebooks/agentchat_swarm_graphrag_trip_planner.mdx",sourceDirName:"notebooks",slug:"/notebooks/agentchat_swarm_graphrag_trip_planner",permalink:"/ag2/docs/notebooks/agentchat_swarm_graphrag_trip_planner",draft:!1,unlisted:!1,editUrl:"https://github.com/ag2ai/ag2/edit/main/notebook/agentchat_swarm_graphrag_trip_planner.ipynb",tags:[{label:"RAG",permalink:"/ag2/docs/tags/rag"},{label:"tool/function",permalink:"/ag2/docs/tags/tool-function"},{label:"swarm",permalink:"/ag2/docs/tags/swarm"}],version:"current",frontMatter:{custom_edit_url:"https://github.com/ag2ai/ag2/edit/main/notebook/agentchat_swarm_graphrag_trip_planner.ipynb",description:"FalkorDB GraphRAG utilises a knowledge graph and can be added as a capability to agents. Together with a swarm orchestration of agents is highly effective at providing a RAG capability.",source_notebook:"/notebook/agentchat_swarm_graphrag_trip_planner.ipynb",tags:["RAG","tool/function","swarm"],title:"Trip planning with a FalkorDB GraphRAG agent using a Swarm"},sidebar:"notebooksSidebar",previous:{title:"Using a local Telemetry server to monitor a GraphRAG agent",permalink:"/ag2/docs/notebooks/agentchat_swarm_graphrag_telemetry_trip_planner"},next:{title:"(Legacy) Implement Swarm-style orchestration with GroupChat",permalink:"/ag2/docs/notebooks/agentchat_swarm_w_groupchat_legacy"}},l={},c=[{value:"Pydantic",id:"pydantic",level:3},{value:"Running a FalkorDB",id:"running-a-falkordb",level:3},{value:"Google Maps API Key",id:"google-maps-api-key",level:3},{value:"Set Configuration and OpenAI API Key",id:"set-configuration-and-openai-api-key",level:3},{value:"Create Ontology",id:"create-ontology",level:3},{value:"Establish FalkorDB and load",id:"establish-falkordb-and-load",level:3},{value:"Pydantic model for Structured Output",id:"pydantic-model-for-structured-output",level:3},{value:"Google Maps Platform",id:"google-maps-platform",level:3},{value:"Swarm",id:"swarm",level:2},{value:"Context Variables",id:"context-variables",level:3},{value:"Agent Functions",id:"agent-functions",level:3},{value:"Agents",id:"agents",level:3},{value:"Hand offs and After works",id:"hand-offs-and-after-works",level:3},{value:"Run the swarm",id:"run-the-swarm",level:3},{value:"Bonus itinerary output",id:"bonus-itinerary-output",level:3}];function u(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h1,{id:"trip-planning-with-a-falkordb-graphrag-agent-using-a-swarm",children:"Trip planning with a FalkorDB GraphRAG agent using a Swarm"}),"\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.a,{href:"https://colab.research.google.com/github/ag2ai/ag2/blob/main/notebook/agentchat_swarm_graphrag_trip_planner.ipynb",children:(0,a.jsx)(e.img,{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})}),"\n",(0,a.jsx)(e.a,{href:"https://github.com/ag2ai/ag2/blob/main/notebook/agentchat_swarm_graphrag_trip_planner.ipynb",children:(0,a.jsx)(e.img,{src:"https://img.shields.io/badge/Open%20on%20GitHub-grey?logo=github",alt:"Open on GitHub"})})]}),"\n",(0,a.jsx)(e.p,{children:"In this notebook, we\u2019re building a trip planning swarm which has an\nobjective to create an itinerary together with a customer. The end\nresult will be an itinerary that has route times and distances\ncalculated between activities."}),"\n",(0,a.jsx)(e.p,{children:"The following diagram outlines the key components of the Swarm, with\nhighlights being:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"FalkorDB agent using a GraphRAG database of restaurants and\nattractions"}),"\n",(0,a.jsx)(e.li,{children:"Structured Output agent that will enforce a strict format for the\naccepted itinerary"}),"\n",(0,a.jsx)(e.li,{children:"Routing agent that utilises the Google Maps API to calculate\ndistances between activites"}),"\n",(0,a.jsx)(e.li,{children:"Swarm orchestration utilising context variables"}),"\n"]}),"\n",(0,a.jsxs)(e.admonition,{title:"Requirements",type:"info",children:[(0,a.jsx)(e.p,{children:"FalkorDB's GraphRAG-SDK is a dependency for this notebook, which can be installed with ag2 via pip:"}),(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"pip install ag2[graph-rag-falkor-db]\n"})}),(0,a.jsxs)(e.p,{children:["For more information, please refer to the ",(0,a.jsx)(e.a,{href:"/docs/installation/",children:"installation guide"}),"."]})]}),"\n",(0,a.jsx)(e.h3,{id:"pydantic",children:"Pydantic"}),"\n",(0,a.jsx)(e.p,{children:"Please ensure you have Pydantic version 2+ installed."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"pip install --upgrade pydantic\n"})}),"\n",(0,a.jsx)(e.h3,{id:"running-a-falkordb",children:"Running a FalkorDB"}),"\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"Note:"})," You need to have a FalkorDB graph database running. If you are\nrunning one in a Docker container, please ensure your Docker network is\nsetup to allow access to it."]}),"\n",(0,a.jsxs)(e.p,{children:["In this example, we\u2019ve set the FalkorDB host and port, please adjust\nthem accordingly. For how to set up FalkorDB, please refer to\n",(0,a.jsx)(e.a,{href:"https://docs.falkordb.com/",children:"https://docs.falkordb.com/"}),"."]}),"\n",(0,a.jsx)(e.h3,{id:"google-maps-api-key",children:"Google Maps API Key"}),"\n",(0,a.jsxs)(e.p,{children:["To use Google\u2019s API to calculate travel times, you will need to have\nenabled the ",(0,a.jsx)(e.code,{children:"Directions API"})," in your Google Maps Platform. You can get\nan API key and free quota, see\n",(0,a.jsx)(e.a,{href:"https://developers.google.com/maps/documentation/directions/overview",children:"here"}),"\nand ",(0,a.jsx)(e.a,{href:"https://developers.google.com/maps/get-started",children:"here"})," for more\ndetails."]}),"\n",(0,a.jsxs)(e.p,{children:["Once you have your API key, set your environment variable\n",(0,a.jsx)(e.code,{children:"GOOGLE_MAP_API_KEY"})," to the key"]}),"\n",(0,a.jsx)(e.h3,{id:"set-configuration-and-openai-api-key",children:"Set Configuration and OpenAI API Key"}),"\n",(0,a.jsxs)(e.p,{children:["By default, FalkorDB uses OpenAI LLMs and that requires an OpenAI key in\nyour environment variable ",(0,a.jsx)(e.code,{children:"OPENAI_API_KEY"}),"."]}),"\n",(0,a.jsx)(e.p,{children:"You can utilise an OAI_CONFIG_LIST file and extract the OpenAI API key\nand put it in the environment, as will be shown in the following cell."}),"\n",(0,a.jsx)(e.p,{children:"Alternatively, you can load the environment variable yourself."}),"\n",(0,a.jsx)(e.admonition,{type:"tip",children:(0,a.jsxs)(e.p,{children:["Learn more about configuring LLMs for agents ",(0,a.jsx)(e.a,{href:"/docs/topics/llm_configuration",children:"here"}),"."]})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import os\n\nimport autogen\n\nconfig_list = autogen.config_list_from_json(env_or_file="OAI_CONFIG_LIST", filter_dict={"model": ["gpt-4o"]})\nllm_config = {"config_list": config_list, "timeout": 120}\n\n# Put the OpenAI API key into the environment\nos.environ["OPENAI_API_KEY"] = config_list[0]["api_key"]\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:"/usr/local/lib/python3.11/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm\n"})}),"\n",(0,a.jsx)(e.h1,{id:"prepare-the-falkordb-graphrag-database",children:"Prepare the FalkorDB GraphRAG database"}),"\n",(0,a.jsx)(e.p,{children:"Using 3 sample JSON data files from our GitHub repository, we will\ncreate a specific ontology for our GraphRAG database and then populate\nit."}),"\n",(0,a.jsx)(e.p,{children:"Creating a specific ontology that matches with the types of queries\nmakes for a more optimal database and is more cost efficient when\npopulating the knowledge graph."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'from autogen.agentchat.contrib.graph_rag.document import Document, DocumentType\n\n# 3 Files (adjust path as necessary)\ninput_paths = [\n    "../test/agentchat/contrib/graph_rag/trip_planner_data/attractions.json",\n    "../test/agentchat/contrib/graph_rag/trip_planner_data/cities.json",\n    "../test/agentchat/contrib/graph_rag/trip_planner_data/restaurants.json",\n]\ninput_documents = [Document(doctype=DocumentType.TEXT, path_or_url=input_path) for input_path in input_paths]\n'})}),"\n",(0,a.jsx)(e.h3,{id:"create-ontology",children:"Create Ontology"}),"\n",(0,a.jsx)(e.p,{children:"Entities: Country, City, Attraction, Restaurant"}),"\n",(0,a.jsx)(e.p,{children:"Relationships: City in Country, Attraction in City, Restaurant in City"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'from graphrag_sdk import Attribute, AttributeType, Entity, Ontology, Relation\n\n# Attraction + Restaurant + City + Country Ontology\ntrip_data_ontology = Ontology()\n\ntrip_data_ontology.add_entity(\n    Entity(\n        label="Country",\n        attributes=[\n            Attribute(\n                name="name",\n                attr_type=AttributeType.STRING,\n                required=True,\n                unique=True,\n            ),\n        ],\n    )\n)\ntrip_data_ontology.add_entity(\n    Entity(\n        label="City",\n        attributes=[\n            Attribute(\n                name="name",\n                attr_type=AttributeType.STRING,\n                required=True,\n                unique=True,\n            ),\n            Attribute(\n                name="weather",\n                attr_type=AttributeType.STRING,\n                required=False,\n                unique=False,\n            ),\n            Attribute(\n                name="population",\n                attr_type=AttributeType.NUMBER,\n                required=False,\n                unique=False,\n            ),\n        ],\n    )\n)\ntrip_data_ontology.add_entity(\n    Entity(\n        label="Restaurant",\n        attributes=[\n            Attribute(\n                name="name",\n                attr_type=AttributeType.STRING,\n                required=True,\n                unique=True,\n            ),\n            Attribute(\n                name="description",\n                attr_type=AttributeType.STRING,\n                required=False,\n                unique=False,\n            ),\n            Attribute(\n                name="rating",\n                attr_type=AttributeType.NUMBER,\n                required=False,\n                unique=False,\n            ),\n            Attribute(\n                name="food_type",\n                attr_type=AttributeType.STRING,\n                required=False,\n                unique=False,\n            ),\n        ],\n    )\n)\ntrip_data_ontology.add_entity(\n    Entity(\n        label="Attraction",\n        attributes=[\n            Attribute(\n                name="name",\n                attr_type=AttributeType.STRING,\n                required=True,\n                unique=True,\n            ),\n            Attribute(\n                name="description",\n                attr_type=AttributeType.STRING,\n                required=False,\n                unique=False,\n            ),\n            Attribute(\n                name="type",\n                attr_type=AttributeType.STRING,\n                required=False,\n                unique=False,\n            ),\n        ],\n    )\n)\ntrip_data_ontology.add_relation(\n    Relation(\n        label="IN_COUNTRY",\n        source="City",\n        target="Country",\n    )\n)\ntrip_data_ontology.add_relation(\n    Relation(\n        label="IN_CITY",\n        source="Restaurant",\n        target="City",\n    )\n)\ntrip_data_ontology.add_relation(\n    Relation(\n        label="IN_CITY",\n        source="Attraction",\n        target="City",\n    )\n)\n'})}),"\n",(0,a.jsx)(e.h3,{id:"establish-falkordb-and-load",children:"Establish FalkorDB and load"}),"\n",(0,a.jsx)(e.p,{children:"Remember: Change your host, port, and preferred OpenAI model if needed\n(gpt-4o-mini and better is recommended)."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'from graphrag_sdk.models.openai import OpenAiGenerativeModel\n\nfrom autogen.agentchat.contrib.graph_rag.falkor_graph_query_engine import FalkorGraphQueryEngine\nfrom autogen.agentchat.contrib.graph_rag.falkor_graph_rag_capability import FalkorGraphRagCapability\n\n# Create FalkorGraphQueryEngine\nquery_engine = FalkorGraphQueryEngine(\n    name="trip_data",\n    host="192.168.0.115",  # Change\n    port=6379,  # if needed\n    ontology=trip_data_ontology,\n    model=OpenAiGenerativeModel("gpt-4o"),\n)\n\n# Ingest data and initialize the database\n# query_engine.init_db(input_doc=input_documents)\n\n# If you have already ingested and created the database, you can use this connect_db instead of init_db\nquery_engine.connect_db()\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# IMPORTS\nimport copy\nimport json\nimport os\nfrom typing import Any, Dict\n\nimport requests\nfrom pydantic import BaseModel\n\nfrom autogen import (\n    AFTER_WORK,\n    ON_CONDITION,\n    AfterWorkOption,\n    SwarmAgent,\n    SwarmResult,\n    UserProxyAgent,\n    initiate_swarm_chat,\n)\n"})}),"\n",(0,a.jsx)(e.h3,{id:"pydantic-model-for-structured-output",children:"Pydantic model for Structured Output"}),"\n",(0,a.jsxs)(e.p,{children:["Utilising OpenAI\u2019s ",(0,a.jsx)(e.a,{href:"https://platform.openai.com/docs/guides/structured-outputs",children:"Structured\nOutputs"}),",\nour Structured Output agent\u2019s responses will be constrained to this\nPydantic model."]}),"\n",(0,a.jsx)(e.p,{children:"The itinerary is structured as: Itinerary has Day(s) has Event(s)"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"class Event(BaseModel):\n    type: str  # Attraction, Restaurant, Travel\n    location: str\n    city: str\n    description: str\n\n\nclass Day(BaseModel):\n    events: list[Event]\n\n\nclass Itinerary(BaseModel):\n    days: list[Day]\n"})}),"\n",(0,a.jsx)(e.h3,{id:"google-maps-platform",children:"Google Maps Platform"}),"\n",(0,a.jsx)(e.p,{children:"The functions necessary to query the Directions API to get travel times."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'def _fetch_travel_time(origin: str, destination: str) -> dict:\n    """\n    Retrieves route information using Google Maps Directions API.\n    API documentation at https://developers.google.com/maps/documentation/directions/get-directions\n    """\n    endpoint = "https://maps.googleapis.com/maps/api/directions/json"\n    params = {\n        "origin": origin,\n        "destination": destination,\n        "mode": "walking",  # driving (default), bicycling, transit\n        "key": os.environ.get("GOOGLE_MAP_API_KEY"),\n    }\n\n    response = requests.get(endpoint, params=params)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        return {"error": "Failed to retrieve the route information", "status_code": response.status_code}\n\n\ndef update_itinerary_with_travel_times(context_variables: dict) -> SwarmResult:\n    """Update the complete itinerary with travel times between each event."""\n\n    """\n    Retrieves route information using Google Maps Directions API.\n    API documentation at https://developers.google.com/maps/documentation/directions/get-directions\n    """\n\n    # Ensure that we have a structured itinerary, if not, back to the structured_output_agent to make it\n    if context_variables.get("structured_itinerary") is None:\n        return SwarmResult(\n            agent="structured_output_agent",\n            values="Structured itinerary not found, please create the structured output, structured_output_agent.",\n        )\n    elif "timed_itinerary" in context_variables:\n        return SwarmResult(values="Timed itinerary already done, inform the customer that their itinerary is ready!")\n\n    # Process the itinerary, converting it back to an object and working through each event to work out travel time and distance\n    itinerary_object = Itinerary.model_validate(json.loads(context_variables["structured_itinerary"]))\n    for day in itinerary_object.days:\n        events = day.events\n        new_events = []\n        pre_event, cur_event = None, None\n        event_count = len(events)\n        index = 0\n        while index < event_count:\n            if index > 0:\n                pre_event = events[index - 1]\n\n            cur_event = events[index]\n            if pre_event:\n                origin = ", ".join([pre_event.location, pre_event.city])\n                destination = ", ".join([cur_event.location, cur_event.city])\n                maps_api_response = _fetch_travel_time(origin=origin, destination=destination)\n                try:\n                    leg = maps_api_response["routes"][0]["legs"][0]\n                    travel_time_txt = f"{leg[\'duration\'][\'text\']}, ({leg[\'distance\'][\'text\']})"\n                    new_events.append(\n                        Event(\n                            type="Travel",\n                            location=f"walking from {pre_event.location} to {cur_event.location}",\n                            city=cur_event.city,\n                            description=travel_time_txt,\n                        )\n                    )\n                except Exception:\n                    print(f"Note: Unable to get travel time from {origin} to {destination}")\n            new_events.append(cur_event)\n            index += 1\n        day.events = new_events\n\n    context_variables["timed_itinerary"] = itinerary_object.model_dump()\n\n    return SwarmResult(context_variables=context_variables, values="Timed itinerary added to context with travel times")\n'})}),"\n",(0,a.jsx)(e.h2,{id:"swarm",children:"Swarm"}),"\n",(0,a.jsx)(e.h3,{id:"context-variables",children:"Context Variables"}),"\n",(0,a.jsx)(e.p,{children:"Our swarm agents will have access to a couple of context variables in\nrelation to the itinerary."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'trip_context = {\n    "itinerary_confirmed": False,\n    "itinerary": "",\n    "structured_itinerary": None,\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"agent-functions",children:"Agent Functions"}),"\n",(0,a.jsx)(e.p,{children:"We have two functions/tools for our agents."}),"\n",(0,a.jsx)(e.p,{children:"One for our Planner agent to mark an itinerary as confirmed by the\ncustomer and to store the final text itinerary. This will then transfer\nto our Structured Output agent."}),"\n",(0,a.jsx)(e.p,{children:"Another for the Structured Output Agent to save the structured itinerary\nand transfer to the Route Timing agent."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'def mark_itinerary_as_complete(final_itinerary: str, context_variables: Dict[str, Any]) -> SwarmResult:\n    """Store and mark our itinerary as accepted by the customer."""\n    context_variables["itinerary_confirmed"] = True\n    context_variables["itinerary"] = final_itinerary\n\n    # This will update the context variables and then transfer to the Structured Output agent\n    return SwarmResult(\n        agent="structured_output_agent", context_variables=context_variables, values="Itinerary recorded and confirmed."\n    )\n\n\ndef create_structured_itinerary(context_variables: Dict[str, Any], structured_itinerary: str) -> SwarmResult:\n    """Once a structured itinerary is created, store it and pass on to the Route Timing agent."""\n\n    # Ensure the itinerary is confirmed, if not, back to the Planner agent to confirm it with the customer\n    if not context_variables["itinerary_confirmed"]:\n        return SwarmResult(\n            agent="planner_agent",\n            values="Itinerary not confirmed, please confirm the itinerary with the customer first.",\n        )\n\n    context_variables["structured_itinerary"] = structured_itinerary\n\n    # This will update the context variables and then transfer to the Route Timing agent\n    return SwarmResult(\n        agent="route_timing_agent", context_variables=context_variables, values="Structured itinerary stored."\n    )\n'})}),"\n",(0,a.jsx)(e.h3,{id:"agents",children:"Agents"}),"\n",(0,a.jsx)(e.p,{children:"Our SwarmAgents and a UserProxyAgent (human) which the swarm will\ninteract with."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'# Planner agent, interacting with the customer and GraphRag agent, to create an itinerary\nplanner_agent = SwarmAgent(\n    name="planner_agent",\n    system_message="You are a trip planner agent. It is important to know where the customer is going, how many days, what they want to do."\n    + "You will work with another agent, graphrag_agent, to get information about restaurant and attractions. "\n    + "You are also working with the customer, so you must ask the customer what they want to do if you don\u2019t have LOCATION, NUMBER OF DAYS, MEALS, and ATTRACTIONS. "\n    + "When you have the customer\'s requirements, work with graphrag_agent to get information for an itinerary."\n    + "You are responsible for creating the itinerary and for each day in the itinerary you MUST HAVE events and EACH EVENT MUST HAVE a \'type\' (\'Restaurant\' or \'Attraction\'), \'location\' (name of restaurant or attraction), \'city\', and \'description\'. "\n    + "Finally, YOU MUST ask the customer if they are happy with the itinerary before marking the itinerary as complete.",\n    functions=[mark_itinerary_as_complete],\n    llm_config=llm_config,\n)\n\n# FalkorDB GraphRAG agent, utilising the FalkorDB to gather data for the Planner agent\ngraphrag_agent = SwarmAgent(\n    name="graphrag_agent",\n    system_message="Return a list of restaurants and/or attractions. List them separately and provide ALL the options in the location. Do not provide travel advice.",\n)\n\n# Adding the FalkorDB capability to the agent\ngraph_rag_capability = FalkorGraphRagCapability(query_engine)\ngraph_rag_capability.add_to_agent(graphrag_agent)\n\n# Structured Output agent, formatting the itinerary into a structured format through the response_format on the LLM Configuration\nstructured_config_list = copy.deepcopy(config_list)\nfor config in structured_config_list:\n    config["response_format"] = Itinerary\n\nstructured_output_agent = SwarmAgent(\n    name="structured_output_agent",\n    system_message="You are a data formatting agent, format the provided itinerary in the context below into the provided format.",\n    llm_config={"config_list": structured_config_list, "timeout": 120},\n    functions=[create_structured_itinerary],\n)\n\n# Route Timing agent, adding estimated travel times to the itinerary by utilising the Google Maps Platform\nroute_timing_agent = SwarmAgent(\n    name="route_timing_agent",\n    system_message="You are a route timing agent. YOU MUST call the update_itinerary_with_travel_times tool if you do not see the exact phrase \'Timed itinerary added to context with travel times\' is seen in this conversation. Only after this please tell the customer \'Your itinerary is ready!\'.",\n    llm_config=llm_config,\n    functions=[update_itinerary_with_travel_times],\n)\n\n# Our customer will be a human in the loop\ncustomer = UserProxyAgent(name="customer")\n'})}),"\n",(0,a.jsx)(e.h3,{id:"hand-offs-and-after-works",children:"Hand offs and After works"}),"\n",(0,a.jsx)(e.p,{children:"In conjunction with the agent\u2019s associated functions, we establish rules\nthat govern the swarm orchestration through hand offs and After works."}),"\n",(0,a.jsxs)(e.p,{children:["For more details on the swarm orchestration, ",(0,a.jsx)(e.a,{href:"https://ag2ai.github.io/ag2/docs/topics/swarm",children:"see the\ndocumentation"}),"."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'planner_agent.register_hand_off(\n    hand_to=[\n        ON_CONDITION(\n            graphrag_agent,\n            "Need information on the restaurants and attractions for a location. DO NOT call more than once at a time.",\n        ),  # Get info from FalkorDB GraphRAG\n        ON_CONDITION(structured_output_agent, "Itinerary is confirmed by the customer"),\n        AFTER_WORK(AfterWorkOption.REVERT_TO_USER),  # Revert to the customer for more information on their plans\n    ]\n)\n\n\n# Back to the Planner when information has been retrieved\ngraphrag_agent.register_hand_off(hand_to=[AFTER_WORK(planner_agent)])\n\n# Once we have formatted our itinerary, we can hand off to the route timing agent to add in the travel timings\nstructured_output_agent.register_hand_off(hand_to=[AFTER_WORK(route_timing_agent)])\n\n# Finally, once the route timing agent has finished, we can terminate the swarm\nroute_timing_agent.register_hand_off(\n    hand_to=[AFTER_WORK(AfterWorkOption.TERMINATE)]  # Once this agent has finished, the swarm can terminate\n)\n'})}),"\n",(0,a.jsx)(e.h3,{id:"run-the-swarm",children:"Run the swarm"}),"\n",(0,a.jsx)(e.p,{children:"Let\u2019s get an itinerary for a couple of days in Rome."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'# Start the conversation\n\nchat_result, context_variables, last_agent = initiate_swarm_chat(\n    initial_agent=planner_agent,\n    agents=[planner_agent, graphrag_agent, structured_output_agent, route_timing_agent],\n    user_agent=customer,\n    context_variables=trip_context,\n    messages="I want to go to Rome for a couple of days. Can you help me plan my trip?",\n    after_work=AfterWorkOption.TERMINATE,\n    max_rounds=100,\n)\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:'customer (to chat_manager):\n\nI want to go to Rome for a couple of days. Can you help me plan my trip?\n\n--------------------------------------------------------------------------------\n\nNext speaker: planner_agent\n\nplanner_agent (to chat_manager):\n\nSure! How many days will you be staying in Rome? Additionally, what type of activities are you interested in doing, and do you have any specific preferences for meals (e.g., certain type of cuisine or dining experience)?\n\n--------------------------------------------------------------------------------\n\nNext speaker: customer\n\ncustomer (to chat_manager):\n\n2 days please, I want lunch and dinner, with an attraction to see in the morning and after lunch.\n\n--------------------------------------------------------------------------------\n\nNext speaker: planner_agent\n\nplanner_agent (to chat_manager):\n\n***** Suggested tool call (call_vQMpso8aOomdfq8S2uCRlnzj): transfer_to_graphrag_agent *****\nArguments: \n{}\n*******************************************************************************************\n\n--------------------------------------------------------------------------------\n\nNext speaker: Tool_Execution\n\n\n>>>>>>>> EXECUTING FUNCTION transfer_to_graphrag_agent...\nTool_Execution (to chat_manager):\n\n***** Response from calling tool (call_vQMpso8aOomdfq8S2uCRlnzj) *****\nSwarmAgent --\x3e graphrag_agent\n**********************************************************************\n\n--------------------------------------------------------------------------------\n\nNext speaker: graphrag_agent\n\ngraphrag_agent (to chat_manager):\n\nRestaurants in Rome:\n1. Trattoria da Enzo - A cozy trattoria known for its traditional Roman dishes and welcoming atmosphere (Rating: 4.5).\n2. Il Pagliaccio - An elegant Michelin-starred restaurant offering contemporary Italian cuisine (Rating: 4.8).\n3. Tonnarello - Casual stop for pasta, meatballs & other simple Roman dishes, plus patio seating & acoustic guitar (Rating: 4.7).\n4. Osteria delle Commari - Local home style Roman restaurant near Vatican Museums (Rating: 4.3).\n5. Armando al Pantheon - Traditional Roman cuisine since 1961 near the Pantheon (Rating: 4.8).\n6. Salumeria Roscioli Ristorante - Known for pasta alla gricia, amatriciana, and an impressive wine cellar (Rating: 4.5).\n7. L\'Arcangelo - Known for some of the best suppl\xec in the city and Thursday gnocchi (Rating: 4.8).\n\nAttractions in Rome:\n1. Colosseum - An ancient amphitheater known for gladiatorial contests and public spectacles.\n2. Vatican Museums - A complex of museums and galleries showcasing works of art collected by Popes over centuries.\n3. Trevi Fountain - A Baroque fountain known for its stunning sculptures and tradition of tossing coins.\n4. Basilica di Santa Maria Maggiore - A major basilica known for its rich history and impressive architecture.\n\n--------------------------------------------------------------------------------\n\nNext speaker: planner_agent\n\nplanner_agent (to chat_manager):\n\nGreat! Here\'s a suggested itinerary for your 2-day trip to Rome:\n\n### Day 1:\n\n- **Morning Attraction:**\n  - **Type:** Attraction\n  - **Location:** Colosseum\n  - **City:** Rome\n  - **Description:** Explore the ancient amphitheater known for gladiatorial contests and public spectacles.\n\n- **Lunch:**\n  - **Type:** Restaurant\n  - **Location:** Trattoria da Enzo\n  - **City:** Rome\n  - **Description:** Enjoy traditional Roman dishes in a cozy and welcoming atmosphere.\n\n- **Afternoon Attraction:**\n  - **Type:** Attraction\n  - **Location:** Vatican Museums\n  - **City:** Rome\n  - **Description:** Visit a complex of museums and galleries showcasing works of art collected by Popes over centuries.\n\n- **Dinner:**\n  - **Type:** Restaurant\n  - **Location:** Armando al Pantheon\n  - **City:** Rome\n  - **Description:** Experience traditional Roman cuisine since 1961, located near the Pantheon.\n\n\n### Day 2:\n\n- **Morning Attraction:**\n  - **Type:** Attraction\n  - **Location:** Trevi Fountain\n  - **City:** Rome\n  - **Description:** Marvel at the stunning sculptures of the Baroque fountain and join the tradition of tossing coins.\n\n- **Lunch:**\n  - **Type:** Restaurant\n  - **Location:** Tonnarello\n  - **City:** Rome\n  - **Description:** Relish in simple Roman dishes such as pasta and meatballs in a casual setting with patio seating.\n\n- **Afternoon Attraction:**\n  - **Type:** Attraction\n  - **Location:** Basilica di Santa Maria Maggiore\n  - **City:** Rome\n  - **Description:** Visit a major basilica known for its rich history and impressive architecture.\n\n- **Dinner:**\n  - **Type:** Restaurant\n  - **Location:** L\'Arcangelo\n  - **City:** Rome\n  - **Description:** Savor some of the best suppl\xec in the city and enjoy traditional gnocchi on Thursdays.\n\nLet me know if you are happy with this itinerary or if there are any changes you would like to make!\n\n--------------------------------------------------------------------------------\n\nNext speaker: customer\n\ncustomer (to chat_manager):\n\nI don\'t feel like eating at L\'Arcangelo, please change that for another option.\n\n--------------------------------------------------------------------------------\n\nNext speaker: planner_agent\n\nplanner_agent (to chat_manager):\n\nCertainly! Here\'s the updated itinerary for Day 2:\n\n### Day 2:\n\n- **Morning Attraction:**\n  - **Type:** Attraction\n  - **Location:** Trevi Fountain\n  - **City:** Rome\n  - **Description:** Marvel at the stunning sculptures of the Baroque fountain and join the tradition of tossing coins.\n\n- **Lunch:**\n  - **Type:** Restaurant\n  - **Location:** Tonnarello\n  - **City:** Rome\n  - **Description:** Relish in simple Roman dishes such as pasta and meatballs in a casual setting with patio seating.\n\n- **Afternoon Attraction:**\n  - **Type:** Attraction\n  - **Location:** Basilica di Santa Maria Maggiore\n  - **City:** Rome\n  - **Description:** Visit a major basilica known for its rich history and impressive architecture.\n\n- **Dinner:**\n  - **Type:** Restaurant\n  - **Location:** Il Pagliaccio\n  - **City:** Rome\n  - **Description:** Indulge in elegant, contemporary Italian cuisine at a Michelin-starred restaurant.\n\nLet me know if this itinerary meets your preferences!\n\n--------------------------------------------------------------------------------\n\nNext speaker: customer\n\ncustomer (to chat_manager):\n\nCan you research and show me all the available restaurant options.\n\n--------------------------------------------------------------------------------\n\nNext speaker: planner_agent\n\nplanner_agent (to chat_manager):\n\nHere are the available restaurant options for your trip to Rome:\n\n1. **Trattoria da Enzo**\n   - **Description:** A cozy trattoria known for its traditional Roman dishes and welcoming atmosphere.\n   - **Rating:** 4.5\n\n2. **Il Pagliaccio**\n   - **Description:** An elegant Michelin-starred restaurant offering contemporary Italian cuisine.\n   - **Rating:** 4.8\n\n3. **Tonnarello**\n   - **Description:** Casual stop for pasta, meatballs & other simple Roman dishes, plus patio seating & acoustic guitar.\n   - **Rating:** 4.7\n\n4. **Osteria delle Commari**\n   - **Description:** Local home style Roman restaurant near Vatican Museums.\n   - **Rating:** 4.3\n\n5. **Armando al Pantheon**\n   - **Description:** Traditional Roman cuisine since 1961 near the Pantheon.\n   - **Rating:** 4.8\n\n6. **Salumeria Roscioli Ristorante**\n   - **Description:** Known for pasta alla gricia, amatriciana, and an impressive wine cellar.\n   - **Rating:** 4.5\n\n7. **L\'Arcangelo**\n   - **Description:** Known for some of the best suppl\xec in the city and Thursday gnocchi.\n   - **Rating:** 4.8\n\nPlease let me know which restaurants you\'d like to include in your itinerary or if there are any changes you\'d like to make!\n\n--------------------------------------------------------------------------------\n\nNext speaker: customer\n\ncustomer (to chat_manager):\n\nTonnarello\'s please.\n\n--------------------------------------------------------------------------------\n\nNext speaker: planner_agent\n\nplanner_agent (to chat_manager):\n\n***** Suggested tool call (call_sROJ1YfU63SDCRfUbRuGqjVa): mark_itinerary_as_complete *****\nArguments: \n{"final_itinerary": "### Day 1:\\n\\n- **Morning Attraction:**\\n  - **Type:** Attraction\\n  - **Location:** Colosseum\\n  - **City:** Rome\\n  - **Description:** Explore the ancient amphitheater known for gladiatorial contests and public spectacles.\\n\\n- **Lunch:**\\n  - **Type:** Restaurant\\n  - **Location:** Trattoria da Enzo\\n  - **City:** Rome\\n  - **Description:** Enjoy traditional Roman dishes in a cozy and welcoming atmosphere.\\n\\n- **Afternoon Attraction:**\\n  - **Type:** Attraction\\n  - **Location:** Vatican Museums\\n  - **City:** Rome\\n  - **Description:** Visit a complex of museums and galleries showcasing works of art collected by Popes over centuries.\\n\\n- **Dinner:**\\n  - **Type:** Restaurant\\n  - **Location:** Armando al Pantheon\\n  - **City:** Rome\\n  - **Description:** Experience traditional Roman cuisine since 1961, located near the Pantheon.\\n\\n\\n### Day 2:\\n\\n- **Morning Attraction:**\\n  - **Type:** Attraction\\n  - **Location:** Trevi Fountain\\n  - **City:** Rome\\n  - **Description:** Marvel at the stunning sculptures of the Baroque fountain and join the tradition of tossing coins.\\n\\n- **Lunch:**\\n  - **Type:** Restaurant\\n  - **Location:** Tonnarello\\n  - **City:** Rome\\n  - **Description:** Relish in simple Roman dishes such as pasta and meatballs in a casual setting with patio seating.\\n\\n- **Afternoon Attraction:**\\n  - **Type:** Attraction\\n  - **Location:** Basilica di Santa Maria Maggiore\\n  - **City:** Rome\\n  - **Description:** Visit a major basilica known for its rich history and impressive architecture.\\n\\n- **Dinner:**\\n  - **Type:** Restaurant\\n  - **Location:** Tonnarello\\n  - **City:** Rome\\n  - **Description:** Return to Tonnarello for a delightful dining experience with a variety of Roman specialties."}\n*******************************************************************************************\n***** Suggested tool call (call_NBw71N4pS66h8VLlgu5nvveN): transfer_to_structured_output_agent *****\nArguments: \n{}\n****************************************************************************************************\n\n--------------------------------------------------------------------------------\n\nNext speaker: Tool_Execution\n\n\n>>>>>>>> EXECUTING FUNCTION mark_itinerary_as_complete...\n\n>>>>>>>> EXECUTING FUNCTION transfer_to_structured_output_agent...\nTool_Execution (to chat_manager):\n\n***** Response from calling tool (call_sROJ1YfU63SDCRfUbRuGqjVa) *****\nItinerary recorded and confirmed.\n**********************************************************************\n\n--------------------------------------------------------------------------------\n***** Response from calling tool (call_NBw71N4pS66h8VLlgu5nvveN) *****\nSwarmAgent --\x3e structured_output_agent\n**********************************************************************\n\n--------------------------------------------------------------------------------\n\nNext speaker: structured_output_agent\n\nstructured_output_agent (to chat_manager):\n\n{"days":[{"events":[{"type":"Attraction","location":"Colosseum","city":"Rome","description":"Explore the ancient amphitheater known for gladiatorial contests and public spectacles."},{"type":"Restaurant","location":"Trattoria da Enzo","city":"Rome","description":"Enjoy traditional Roman dishes in a cozy and welcoming atmosphere."},{"type":"Attraction","location":"Vatican Museums","city":"Rome","description":"Visit a complex of museums and galleries showcasing works of art collected by Popes over centuries."},{"type":"Restaurant","location":"Armando al Pantheon","city":"Rome","description":"Experience traditional Roman cuisine since 1961, located near the Pantheon."}]},{"events":[{"type":"Attraction","location":"Trevi Fountain","city":"Rome","description":"Marvel at the stunning sculptures of the Baroque fountain and join the tradition of tossing coins."},{"type":"Restaurant","location":"Tonnarello","city":"Rome","description":"Relish in simple Roman dishes such as pasta and meatballs in a casual setting with patio seating."},{"type":"Attraction","location":"Basilica di Santa Maria Maggiore","city":"Rome","description":"Visit a major basilica known for its rich history and impressive architecture."},{"type":"Restaurant","location":"Tonnarello","city":"Rome","description":"Return to Tonnarello for a delightful dining experience with a variety of Roman specialties."}]}]}\n\n--------------------------------------------------------------------------------\n\nNext speaker: route_timing_agent\n\nroute_timing_agent (to chat_manager):\n\nNone\n***** Suggested tool call (call_6nnUKnD3VveszMT8OvkqUTCC): update_itinerary_with_travel_times *****\nArguments: \n{}\n***************************************************************************************************\n\n--------------------------------------------------------------------------------\n\nNext speaker: Tool_Execution\n\n\n>>>>>>>> EXECUTING FUNCTION update_itinerary_with_travel_times...\nTool_Execution (to chat_manager):\n\n***** Response from calling tool (call_6nnUKnD3VveszMT8OvkqUTCC) *****\nStructured itinerary not found, please create the structured output, structured_output_agent.\n**********************************************************************\n\n--------------------------------------------------------------------------------\n\nNext speaker: structured_output_agent\n\nstructured_output_agent (to chat_manager):\n\n***** Suggested tool call (call_uTWKi1KdcsaFK9RxAeFUIWbU): create_structured_itinerary *****\nArguments: \n{"structured_itinerary":"{\\"days\\":[{\\"events\\":[{\\"type\\":\\"Attraction\\",\\"location\\":\\"Colosseum\\",\\"city\\":\\"Rome\\",\\"description\\":\\"Explore the ancient amphitheater known for gladiatorial contests and public spectacles.\\"},{\\"type\\":\\"Restaurant\\",\\"location\\":\\"Trattoria da Enzo\\",\\"city\\":\\"Rome\\",\\"description\\":\\"Enjoy traditional Roman dishes in a cozy and welcoming atmosphere.\\"},{\\"type\\":\\"Attraction\\",\\"location\\":\\"Vatican Museums\\",\\"city\\":\\"Rome\\",\\"description\\":\\"Visit a complex of museums and galleries showcasing works of art collected by Popes over centuries.\\"},{\\"type\\":\\"Restaurant\\",\\"location\\":\\"Armando al Pantheon\\",\\"city\\":\\"Rome\\",\\"description\\":\\"Experience traditional Roman cuisine since 1961, located near the Pantheon.\\"}]},{\\"events\\":[{\\"type\\":\\"Attraction\\",\\"location\\":\\"Trevi Fountain\\",\\"city\\":\\"Rome\\",\\"description\\":\\"Marvel at the stunning sculptures of the Baroque fountain and join the tradition of tossing coins.\\"},{\\"type\\":\\"Restaurant\\",\\"location\\":\\"Tonnarello\\",\\"city\\":\\"Rome\\",\\"description\\":\\"Relish in simple Roman dishes such as pasta and meatballs in a casual setting with patio seating.\\"},{\\"type\\":\\"Attraction\\",\\"location\\":\\"Basilica di Santa Maria Maggiore\\",\\"city\\":\\"Rome\\",\\"description\\":\\"Visit a major basilica known for its rich history and impressive architecture.\\"},{\\"type\\":\\"Restaurant\\",\\"location\\":\\"Tonnarello\\",\\"city\\":\\"Rome\\",\\"description\\":\\"Return to Tonnarello for a delightful dining experience with a variety of Roman specialties.\\"}]}]}"}\n********************************************************************************************\n\n--------------------------------------------------------------------------------\n\nNext speaker: Tool_Execution\n\n\n>>>>>>>> EXECUTING FUNCTION create_structured_itinerary...\nTool_Execution (to chat_manager):\n\n***** Response from calling tool (call_uTWKi1KdcsaFK9RxAeFUIWbU) *****\nStructured itinerary stored.\n**********************************************************************\n\n--------------------------------------------------------------------------------\n\nNext speaker: route_timing_agent\n\nroute_timing_agent (to chat_manager):\n\n***** Suggested tool call (call_7alJoHYs74wsPIz4WhMrj7Zu): update_itinerary_with_travel_times *****\nArguments: \n{}\n***************************************************************************************************\n\n--------------------------------------------------------------------------------\n\nNext speaker: Tool_Execution\n\n\n>>>>>>>> EXECUTING FUNCTION update_itinerary_with_travel_times...\nTool_Execution (to chat_manager):\n\n***** Response from calling tool (call_7alJoHYs74wsPIz4WhMrj7Zu) *****\nTimed itinerary added to context with travel times\n**********************************************************************\n\n--------------------------------------------------------------------------------\n\nNext speaker: route_timing_agent\n\nroute_timing_agent (to chat_manager):\n\nYour itinerary is ready!\n\n--------------------------------------------------------------------------------\n'})}),"\n",(0,a.jsx)(e.h3,{id:"bonus-itinerary-output",children:"Bonus itinerary output"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'def print_itinerary(itinerary_data):\n    header = "\u2588             \u2588\\n \u2588           \u2588 \\n  \u2588  \u2588\u2588\u2588\u2588\u2588  \u2588  \\n   \u2588\u2588     \u2588\u2588   \\n  \u2588         \u2588  \\n \u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588 \\n \u2588 \u2588\u2588 \u2588\u2588\u2588 \u2588\u2588 \u2588 \\n   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \\n\\n \u2588\u2588   \u2588\u2588\u2588 \u2588\u2588\u2588  \\n\u2588  \u2588 \u2588       \u2588 \\n\u2588\u2588\u2588\u2588 \u2588 \u2588\u2588  \u2588\u2588  \\n\u2588  \u2588 \u2588  \u2588 \u2588    \\n\u2588  \u2588  \u2588\u2588  \u2588\u2588\u2588\u2588 \\n"\n    width = 80\n    icons = {"Travel": "\ud83d\udeb6", "Restaurant": "\ud83c\udf7d\ufe0f", "Attraction": "\ud83c\udfdb\ufe0f"}\n\n    for line in header.split("\\n"):\n        print(line.center(width))\n    print(f"Itinerary for {itinerary_data[\'days\'][0][\'events\'][0][\'city\']}".center(width))\n    print("=" * width)\n\n    for day_num, day in enumerate(itinerary_data["days"], 1):\n        print(f"\\nDay {day_num}".center(width))\n        print("-" * width)\n\n        for event in day["events"]:\n            event_type = event["type"]\n            print(f"\\n  {icons[event_type]} {event[\'location\']}")\n            if event_type != "Travel":\n                words = event["description"].split()\n                line = "    "\n                for word in words:\n                    if len(line) + len(word) + 1 <= 76:\n                        line += word + " "\n                    else:\n                        print(line)\n                        line = "    " + word + " "\n                if line.strip():\n                    print(line)\n            else:\n                print(f"    {event[\'description\']}")\n        print("\\n" + "-" * width)\n\n\nif "timed_itinerary" in context_variables:\n    print_itinerary(context_variables["timed_itinerary"])\nelse:\n    print("No itinerary available to print.")\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:"                                \u2588             \u2588                                 \n                                 \u2588           \u2588                                  \n                                  \u2588  \u2588\u2588\u2588\u2588\u2588  \u2588                                   \n                                   \u2588\u2588     \u2588\u2588                                    \n                                  \u2588         \u2588                                   \n                                 \u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588                                  \n                                 \u2588 \u2588\u2588 \u2588\u2588\u2588 \u2588\u2588 \u2588                                  \n                                   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                                    \n                                                                                \n                                 \u2588\u2588   \u2588\u2588\u2588 \u2588\u2588\u2588                                   \n                                \u2588  \u2588 \u2588       \u2588                                  \n                                \u2588\u2588\u2588\u2588 \u2588 \u2588\u2588  \u2588\u2588                                   \n                                \u2588  \u2588 \u2588  \u2588 \u2588                                     \n                                \u2588  \u2588  \u2588\u2588  \u2588\u2588\u2588\u2588                                  \n                                                                                \n                               Itinerary for Rome                               \n================================================================================\n                                     \nDay 1                                     \n--------------------------------------------------------------------------------\n\n  \ud83c\udfdb\ufe0f Colosseum\n    Explore the ancient amphitheater known for gladiatorial contests and \n    public spectacles. \n\n  \ud83d\udeb6 walking from Colosseum to Trattoria da Enzo\n    24 mins, (1.8 km)\n\n  \ud83c\udf7d\ufe0f Trattoria da Enzo\n    Enjoy traditional Roman dishes in a cozy and welcoming atmosphere. \n\n  \ud83d\udeb6 walking from Trattoria da Enzo to Vatican Museums\n    50 mins, (3.5 km)\n\n  \ud83c\udfdb\ufe0f Vatican Museums\n    Visit a complex of museums and galleries showcasing works of art \n    collected by Popes over centuries. \n\n  \ud83d\udeb6 walking from Vatican Museums to Armando al Pantheon\n    36 mins, (2.6 km)\n\n  \ud83c\udf7d\ufe0f Armando al Pantheon\n    Experience traditional Roman cuisine since 1961, located near the \n    Pantheon. \n\n--------------------------------------------------------------------------------\n                                     \nDay 2                                     \n--------------------------------------------------------------------------------\n\n  \ud83c\udfdb\ufe0f Trevi Fountain\n    Marvel at the stunning sculptures of the Baroque fountain and join the \n    tradition of tossing coins. \n\n  \ud83d\udeb6 walking from Trevi Fountain to Tonnarello\n    31 mins, (2.2 km)\n\n  \ud83c\udf7d\ufe0f Tonnarello\n    Relish in simple Roman dishes such as pasta and meatballs in a casual \n    setting with patio seating. \n\n  \ud83d\udeb6 walking from Tonnarello to Basilica di Santa Maria Maggiore\n    46 mins, (3.2 km)\n\n  \ud83c\udfdb\ufe0f Basilica di Santa Maria Maggiore\n    Visit a major basilica known for its rich history and impressive \n    architecture. \n\n  \ud83d\udeb6 walking from Basilica di Santa Maria Maggiore to Tonnarello\n    44 mins, (3.2 km)\n\n  \ud83c\udf7d\ufe0f Tonnarello\n    Return to Tonnarello for a delightful dining experience with a variety \n    of Roman specialties. \n\n--------------------------------------------------------------------------------\n"})})]})}function d(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(u,{...n})}):u(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>s});var a=t(96540);const i={},r=a.createContext(i);function o(n){const e=a.useContext(r);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:o(n.components),a.createElement(r.Provider,{value:e},n.children)}}}]);