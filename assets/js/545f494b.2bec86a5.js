"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[38382],{5713:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=t(74848),a=t(28453);const i={custom_edit_url:"https://github.com/ag2ai/ag2/edit/main/notebook/agentchat_swarm_graphrag_telemetry_trip_planner.ipynb",description:"FalkorDB GraphRAG utilises a knowledge graph and can be added as a capability to agents. Together with a swarm orchestration of agents is highly effective at providing a RAG capability.",source_notebook:"/notebook/agentchat_swarm_graphrag_telemetry_trip_planner.ipynb",tags:["RAG","tool/function","swarm"],title:"Using a local Telemetry server to monitor a GraphRAG agent"},o="Using a local Telemetry server to monitor a GraphRAG agent",s={id:"notebooks/agentchat_swarm_graphrag_telemetry_trip_planner",title:"Using a local Telemetry server to monitor a GraphRAG agent",description:"FalkorDB GraphRAG utilises a knowledge graph and can be added as a capability to agents. Together with a swarm orchestration of agents is highly effective at providing a RAG capability.",source:"@site/docs/notebooks/agentchat_swarm_graphrag_telemetry_trip_planner.mdx",sourceDirName:"notebooks",slug:"/notebooks/agentchat_swarm_graphrag_telemetry_trip_planner",permalink:"/ag2/docs/notebooks/agentchat_swarm_graphrag_telemetry_trip_planner",draft:!1,unlisted:!1,editUrl:"https://github.com/ag2ai/ag2/edit/main/notebook/agentchat_swarm_graphrag_telemetry_trip_planner.ipynb",tags:[{label:"RAG",permalink:"/ag2/docs/tags/rag"},{label:"tool/function",permalink:"/ag2/docs/tags/tool-function"},{label:"swarm",permalink:"/ag2/docs/tags/swarm"}],version:"current",frontMatter:{custom_edit_url:"https://github.com/ag2ai/ag2/edit/main/notebook/agentchat_swarm_graphrag_telemetry_trip_planner.ipynb",description:"FalkorDB GraphRAG utilises a knowledge graph and can be added as a capability to agents. Together with a swarm orchestration of agents is highly effective at providing a RAG capability.",source_notebook:"/notebook/agentchat_swarm_graphrag_telemetry_trip_planner.ipynb",tags:["RAG","tool/function","swarm"],title:"Using a local Telemetry server to monitor a GraphRAG agent"},sidebar:"notebooksSidebar",previous:{title:"Swarm Orchestration with AG2",permalink:"/ag2/docs/notebooks/agentchat_swarm"},next:{title:"Trip planning with a FalkorDB GraphRAG agent using a Swarm",permalink:"/ag2/docs/notebooks/agentchat_swarm_graphrag_trip_planner"}},l={},c=[{value:"Initialize Python environment",id:"initialize-python-environment",level:2},{value:"Install Docker Containers",id:"install-docker-containers",level:2},{value:"FalkorDB",id:"falkordb",level:3},{value:"Arize Phoenix",id:"arize-phoenix",level:3},{value:"Arize Phoenix: setup and configuration",id:"arize-phoenix-setup-and-configuration",level:2},{value:"Google Maps API Key",id:"google-maps-api-key",level:3},{value:"Set Configuration and OpenAI API Key",id:"set-configuration-and-openai-api-key",level:3},{value:"Create Ontology",id:"create-ontology",level:3},{value:"Initialize FalkorDB and Query Engine",id:"initialize-falkordb-and-query-engine",level:3},{value:"Pydantic model for Structured Output",id:"pydantic-model-for-structured-output",level:3},{value:"Google Maps Platform",id:"google-maps-platform",level:3},{value:"Swarm",id:"swarm",level:2},{value:"Context Variables",id:"context-variables",level:3},{value:"Agent Functions",id:"agent-functions",level:3},{value:"Agents",id:"agents",level:3},{value:"Hand offs and After works",id:"hand-offs-and-after-works",level:3},{value:"Run the swarm",id:"run-the-swarm",level:3},{value:"Bonus itinerary output",id:"bonus-itinerary-output",level:3},{value:"Review FalkorDB Graph",id:"review-falkordb-graph",level:2},{value:"Review Arize Phoenix Telemetry Info",id:"review-arize-phoenix-telemetry-info",level:2},{value:"Card View",id:"card-view",level:3},{value:"List View",id:"list-view",level:3},{value:"Detail View - Route Timing Agent - LLM error",id:"detail-view---route-timing-agent---llm-error",level:3},{value:"Detail View - Route Timing Agent - working normally",id:"detail-view---route-timing-agent---working-normally",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"using-a-local-telemetry-server-to-monitor-a-graphrag-agent",children:"Using a local Telemetry server to monitor a GraphRAG agent"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://colab.research.google.com/github/ag2ai/ag2/blob/main/notebook/agentchat_swarm_graphrag_telemetry_trip_planner.ipynb",children:(0,r.jsx)(n.img,{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})}),"\n",(0,r.jsx)(n.a,{href:"https://github.com/ag2ai/ag2/blob/main/notebook/agentchat_swarm_graphrag_telemetry_trip_planner.ipynb",children:(0,r.jsx)(n.img,{src:"https://img.shields.io/badge/Open%20on%20GitHub-grey?logo=github",alt:"Open on GitHub"})})]}),"\n",(0,r.jsx)(n.p,{children:"In this notebook, we\u2019re building a trip planning swarm which has an\nobjective to create an itinerary together with a customer. The end\nresult will be an itinerary that has route times and distances\ncalculated between activities."}),"\n",(0,r.jsx)(n.p,{children:"The following diagram outlines the key components of the Swarm, with\nhighlights being:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"FalkorDB agent using a GraphRAG database of restaurants and\nattractions"}),"\n",(0,r.jsx)(n.li,{children:"Arize Phoenix to provide transparency using the OpenTelemetry\nstandard"}),"\n",(0,r.jsx)(n.li,{children:"Structured Output agent that will enforce a strict format for the\naccepted itinerary"}),"\n",(0,r.jsx)(n.li,{children:"Routing agent that utilises the Google Maps API to calculate\ndistances between activites"}),"\n",(0,r.jsx)(n.li,{children:"Swarm orchestration utilising context variables"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"initialize-python-environment",children:"Initialize Python environment"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"FalkorDB\u2019s GraphRAG-SDK is a dependency for this notebook"}),"\n",(0,r.jsx)(n.li,{children:"Please ensure you have Pydantic version 2+ installed"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"!pip install -qU pydantic ag2[graph-rag-falkor-db] ipykernel\n"})}),"\n",(0,r.jsx)(n.h2,{id:"install-docker-containers",children:"Install Docker Containers"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," This likely requires a docker compose file to get it to work\nreliably. It didn\u2019t require it on my system, but plan to come back to it\nat some point."]}),"\n",(0,r.jsx)(n.p,{children:"For now I\u2019m more interested in instrumenting GraphRAG solutions to get\nbetter visibility to key interations with the LLM \u2013 in particular for\nentity and link detection."}),"\n",(0,r.jsx)(n.h3,{id:"falkordb",children:"FalkorDB"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["UI endpoint: ",(0,r.jsx)(n.a,{href:"http://localhost:3000/graph",children:"http://localhost:3000/graph"})]}),"\n",(0,r.jsxs)(n.li,{children:["sample query: ",(0,r.jsx)(n.code,{children:"match path = ()-[]-() return path"})]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# if you run the FalkorDB image with the rm flag it is removed after the container is stopped\n# for more information refer to:  https://docs.falkordb.com/\n\n# !docker run -p 6379:6379 -p 3000:3000 -it --rm falkordb/falkordb:latest\n\nimport subprocess\n\n# Run the Docker container without interactive mode\nsubprocess.Popen([\n    "docker", "run", "-p", "6379:6379", "-p", "3000:3000",\n    "--rm", "falkordb/falkordb:latest"\n])\n'})}),"\n",(0,r.jsx)(n.h3,{id:"arize-phoenix",children:"Arize Phoenix"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["UI endpoint: ",(0,r.jsx)(n.a,{href:"http://localhost:6006",children:"http://localhost:6006"})]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# for more information refer to https://docs.arize.com/phoenix/tracing/integrations-tracing/autogen-support#docker\n# !docker run -p 6006:6006 -p 4317:4317 arizephoenix/phoenix:latest\n\nimport subprocess\n\n# Run the Docker container without interactive mode\nsubprocess.Popen([\n    "docker", "run", "-p", "6006:6006", "-p", "4317:4317",\n    "--rm", "arizephoenix/phoenix:latest"\n])\n'})}),"\n",(0,r.jsx)(n.h2,{id:"arize-phoenix-setup-and-configuration",children:"Arize Phoenix: setup and configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"!pip install -q arize-phoenix-otel\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from phoenix.otel import register\n\n# defaults to endpoint="http://localhost:4317"\ntracer_provider = register(\n  project_name="ag2-swarm-graphrag", # Default is \'default\'\n  endpoint="http://localhost:4317",  # Sends traces using gRPC\n)\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"## install python telemetry library requirements\n!pip install -q openinference-instrumentation-openai 'httpx<0.28'\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from openinference.instrumentation.openai import OpenAIInstrumentor\n\nOpenAIInstrumentor().instrument(tracer_provider=tracer_provider)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"google-maps-api-key",children:"Google Maps API Key"}),"\n",(0,r.jsxs)(n.p,{children:["To use Google\u2019s API to calculate travel times, you will need to have\nenabled the ",(0,r.jsx)(n.code,{children:"Directions API"})," in your Google Maps Platform. You can get\nan API key and free quota, see\n",(0,r.jsx)(n.a,{href:"https://developers.google.com/maps/documentation/directions/overview",children:"here"}),"\nand ",(0,r.jsx)(n.a,{href:"https://developers.google.com/maps/get-started",children:"here"})," for more\ndetails."]}),"\n",(0,r.jsxs)(n.p,{children:["Once you have your API key, set the environment variable\n",(0,r.jsx)(n.code,{children:"GOOGLE_MAP_API_KEY"})," to this value."]}),"\n",(0,r.jsxs)(n.p,{children:["NOTE: If the route planning step is failing, it is likely an environment\nvariable issue which can occur in Jupyter notebooks. The code in the\n",(0,r.jsx)(n.code,{children:"update_itinerary_with_travel_times"})," and ",(0,r.jsx)(n.code,{children:"_fetch_travel_time"})," functions\nbelow could be enhanced to provide better visibility if these API calls\nfail. The following code cell can assist."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import os\n\nos.environ["GOOGLE_MAP_API_KEY"] = os.getenv("GOOGLE_MAP_API_KEY")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"set-configuration-and-openai-api-key",children:"Set Configuration and OpenAI API Key"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Create a OAI_CONFIG_LIST file"})," in the AG2 project ",(0,r.jsx)(n.code,{children:"notebook"}),"\ndirectory based on the OAI_CONFIG_LIST_sample file from the root\ndirectory."]}),"\n",(0,r.jsxs)(n.p,{children:["By default, FalkorDB uses OpenAI LLMs and that requires an OpenAI key in\nyour environment variable ",(0,r.jsx)(n.code,{children:"OPENAI_API_KEY"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"You can utilise an OAI_CONFIG_LIST file and extract the OpenAI API key\nand put it in the environment, as will be shown in the following cell."}),"\n",(0,r.jsx)(n.p,{children:"Alternatively, you can load the environment variable yourself."}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["Learn more about configuring LLMs for agents ",(0,r.jsx)(n.a,{href:"/docs/topics/llm_configuration",children:"here"}),"."]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import os\n\nimport autogen\n\nconfig_list = autogen.config_list_from_json(env_or_file="OAI_CONFIG_LIST", filter_dict={"model": ["gpt-4o"]})\nllm_config = {"config_list": config_list, "timeout": 120}\n\n# Put the OpenAI API key into the environment using the config_list or env variable\n# os.environ["OPENAI_API_KEY"] = config_list[0]["api_key"]\nos.environ["OPENAI_API_KEY"] = os.getenv("OPENAI_API_KEY")\n'})}),"\n",(0,r.jsx)(n.h1,{id:"prepare-the-falkordb-graphrag-database",children:"Prepare the FalkorDB GraphRAG database"}),"\n",(0,r.jsx)(n.p,{children:"Using 3 sample JSON data files from our GitHub repository, we will\ncreate a specific ontology for our GraphRAG database and then populate\nit."}),"\n",(0,r.jsx)(n.p,{children:"Creating a specific ontology that matches with the types of queries\nmakes for a more optimal database and is more cost efficient when\npopulating the knowledge graph."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from autogen.agentchat.contrib.graph_rag.document import Document, DocumentType\n\n# 3 Files (adjust path as necessary)\ninput_paths = [\n    "../test/agentchat/contrib/graph_rag/trip_planner_data/attractions.json",\n    "../test/agentchat/contrib/graph_rag/trip_planner_data/cities.json",\n    "../test/agentchat/contrib/graph_rag/trip_planner_data/restaurants.json",\n]\ninput_documents = [Document(doctype=DocumentType.TEXT, path_or_url=input_path) for input_path in input_paths]\n'})}),"\n",(0,r.jsx)(n.h3,{id:"create-ontology",children:"Create Ontology"}),"\n",(0,r.jsx)(n.p,{children:"Entities: Country, City, Attraction, Restaurant"}),"\n",(0,r.jsx)(n.p,{children:"Relationships: City in Country, Attraction in City, Restaurant in City"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from graphrag_sdk import Attribute, AttributeType, Entity, Ontology, Relation\n\n# Attraction + Restaurant + City + Country Ontology\ntrip_data_ontology = Ontology()\n\ntrip_data_ontology.add_entity(\n    Entity(\n        label="Country",\n        attributes=[\n            Attribute(\n                name="name",\n                attr_type=AttributeType.STRING,\n                required=True,\n                unique=True,\n            ),\n        ],\n    )\n)\ntrip_data_ontology.add_entity(\n    Entity(\n        label="City",\n        attributes=[\n            Attribute(\n                name="name",\n                attr_type=AttributeType.STRING,\n                required=True,\n                unique=True,\n            ),\n            Attribute(\n                name="weather",\n                attr_type=AttributeType.STRING,\n                required=False,\n                unique=False,\n            ),\n            Attribute(\n                name="population",\n                attr_type=AttributeType.NUMBER,\n                required=False,\n                unique=False,\n            ),\n        ],\n    )\n)\ntrip_data_ontology.add_entity(\n    Entity(\n        label="Restaurant",\n        attributes=[\n            Attribute(\n                name="name",\n                attr_type=AttributeType.STRING,\n                required=True,\n                unique=True,\n            ),\n            Attribute(\n                name="description",\n                attr_type=AttributeType.STRING,\n                required=False,\n                unique=False,\n            ),\n            Attribute(\n                name="rating",\n                attr_type=AttributeType.NUMBER,\n                required=False,\n                unique=False,\n            ),\n            Attribute(\n                name="food_type",\n                attr_type=AttributeType.STRING,\n                required=False,\n                unique=False,\n            ),\n        ],\n    )\n)\ntrip_data_ontology.add_entity(\n    Entity(\n        label="Attraction",\n        attributes=[\n            Attribute(\n                name="name",\n                attr_type=AttributeType.STRING,\n                required=True,\n                unique=True,\n            ),\n            Attribute(\n                name="description",\n                attr_type=AttributeType.STRING,\n                required=False,\n                unique=False,\n            ),\n            Attribute(\n                name="type",\n                attr_type=AttributeType.STRING,\n                required=False,\n                unique=False,\n            ),\n        ],\n    )\n)\ntrip_data_ontology.add_relation(\n    Relation(\n        label="IN_COUNTRY",\n        source="City",\n        target="Country",\n    )\n)\ntrip_data_ontology.add_relation(\n    Relation(\n        label="IN_CITY",\n        source="Restaurant",\n        target="City",\n    )\n)\ntrip_data_ontology.add_relation(\n    Relation(\n        label="IN_CITY",\n        source="Attraction",\n        target="City",\n    )\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"initialize-falkordb-and-query-engine",children:"Initialize FalkorDB and Query Engine"}),"\n",(0,r.jsx)(n.p,{children:"Remember: Change your host, port, and preferred OpenAI model if needed\n(gpt-4o-mini and better is recommended)."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from graphrag_sdk.models.openai import OpenAiGenerativeModel\n\nfrom autogen.agentchat.contrib.graph_rag.falkor_graph_query_engine import FalkorGraphQueryEngine\nfrom autogen.agentchat.contrib.graph_rag.falkor_graph_rag_capability import FalkorGraphRagCapability\n\n# Create FalkorGraphQueryEngine\nquery_engine = FalkorGraphQueryEngine(\n    name="trip_data",\n    host="localhost",  # change to a specific IP address if you run into issues connecting to your local instance\n    port=6379,  # if needed\n    ontology=trip_data_ontology,\n    model=OpenAiGenerativeModel("gpt-4o"),\n)\n\n# Ingest data and initialize the database\nquery_engine.init_db(input_doc=input_documents)\n\n# If you have already ingested and created the database, you can use this connect_db instead of init_db\n# query_engine.connect_db()\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# IMPORTS\nimport copy\nimport json\nimport os\nfrom typing import Any, Dict\n\nimport requests\nfrom pydantic import BaseModel\n\nfrom autogen import (\n    AFTER_WORK,\n    ON_CONDITION,\n    AfterWorkOption,\n    SwarmAgent,\n    SwarmResult,\n    UserProxyAgent,\n    initiate_swarm_chat,\n)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"pydantic-model-for-structured-output",children:"Pydantic model for Structured Output"}),"\n",(0,r.jsxs)(n.p,{children:["Utilising OpenAI\u2019s ",(0,r.jsx)(n.a,{href:"https://platform.openai.com/docs/guides/structured-outputs",children:"Structured\nOutputs"}),",\nour Structured Output agent\u2019s responses will be constrained to this\nPydantic model."]}),"\n",(0,r.jsx)(n.p,{children:"The itinerary is structured as: Itinerary has Day(s) has Event(s)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Event(BaseModel):\n    type: str  # Attraction, Restaurant, Travel\n    location: str\n    city: str\n    description: str\n\n\nclass Day(BaseModel):\n    events: list[Event]\n\n\nclass Itinerary(BaseModel):\n    days: list[Day]\n"})}),"\n",(0,r.jsx)(n.h3,{id:"google-maps-platform",children:"Google Maps Platform"}),"\n",(0,r.jsx)(n.p,{children:"The functions necessary to query the Directions API to get travel times."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def _fetch_travel_time(origin: str, destination: str) -> dict:\n    """\n    Retrieves route information using Google Maps Directions API.\n    API documentation at https://developers.google.com/maps/documentation/directions/get-directions\n    """\n    endpoint = "https://maps.googleapis.com/maps/api/directions/json"\n    params = {\n        "origin": origin,\n        "destination": destination,\n        "mode": "walking",  # driving (default), bicycling, transit\n        "key": os.environ.get("GOOGLE_MAP_API_KEY"),\n    }\n\n    response = requests.get(endpoint, params=params)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        return {"error": "Failed to retrieve the route information", "status_code": response.status_code}\n\n\ndef update_itinerary_with_travel_times(context_variables: dict) -> SwarmResult:\n    """Update the complete itinerary with travel times between each event."""\n\n    """\n    Retrieves route information using Google Maps Directions API.\n    API documentation at https://developers.google.com/maps/documentation/directions/get-directions\n    """\n\n    # Ensure that we have a structured itinerary, if not, back to the structured_output_agent to make it\n    if context_variables.get("structured_itinerary") is None:\n        return SwarmResult(\n            agent="structured_output_agent",\n            values="Structured itinerary not found, please create the structured output, structured_output_agent.",\n        )\n    elif "timed_itinerary" in context_variables:\n        return SwarmResult(values="Timed itinerary already done, inform the customer that their itinerary is ready!")\n\n    # Process the itinerary, converting it back to an object and working through each event to work out travel time and distance\n    itinerary_object = Itinerary.model_validate(json.loads(context_variables["structured_itinerary"]))\n    for day in itinerary_object.days:\n        events = day.events\n        new_events = []\n        pre_event, cur_event = None, None\n        event_count = len(events)\n        index = 0\n        while index < event_count:\n            if index > 0:\n                pre_event = events[index - 1]\n\n            cur_event = events[index]\n            if pre_event:\n                origin = ", ".join([pre_event.location, pre_event.city])\n                destination = ", ".join([cur_event.location, cur_event.city])\n                maps_api_response = _fetch_travel_time(origin=origin, destination=destination)\n                try:\n                    leg = maps_api_response["routes"][0]["legs"][0]\n                    travel_time_txt = f"{leg[\'duration\'][\'text\']}, ({leg[\'distance\'][\'text\']})"\n                    new_events.append(\n                        Event(\n                            type="Travel",\n                            location=f"walking from {pre_event.location} to {cur_event.location}",\n                            city=cur_event.city,\n                            description=travel_time_txt,\n                        )\n                    )\n                except Exception:\n                    print(f"Note: Unable to get travel time from {origin} to {destination}")\n            new_events.append(cur_event)\n            index += 1\n        day.events = new_events\n\n    context_variables["timed_itinerary"] = itinerary_object.model_dump()\n\n    return SwarmResult(context_variables=context_variables, values="Timed itinerary added to context with travel times")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"swarm",children:"Swarm"}),"\n",(0,r.jsx)(n.h3,{id:"context-variables",children:"Context Variables"}),"\n",(0,r.jsx)(n.p,{children:"Our swarm agents will have access to a couple of context variables in\nrelation to the itinerary."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'trip_context = {\n    "itinerary_confirmed": False,\n    "itinerary": "",\n    "structured_itinerary": None,\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"agent-functions",children:"Agent Functions"}),"\n",(0,r.jsx)(n.p,{children:"We have two functions/tools for our agents."}),"\n",(0,r.jsx)(n.p,{children:"One for our Planner agent to mark an itinerary as confirmed by the\ncustomer and to store the final text itinerary. This will then transfer\nto our Structured Output agent."}),"\n",(0,r.jsx)(n.p,{children:"Another for the Structured Output Agent to save the structured itinerary\nand transfer to the Route Timing agent."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def mark_itinerary_as_complete(final_itinerary: str, context_variables: Dict[str, Any]) -> SwarmResult:\n    """Store and mark our itinerary as accepted by the customer."""\n    context_variables["itinerary_confirmed"] = True\n    context_variables["itinerary"] = final_itinerary\n\n    # This will update the context variables and then transfer to the Structured Output agent\n    return SwarmResult(\n        agent="structured_output_agent", context_variables=context_variables, values="Itinerary recorded and confirmed."\n    )\n\n\ndef create_structured_itinerary(context_variables: Dict[str, Any], structured_itinerary: str) -> SwarmResult:\n    """Once a structured itinerary is created, store it and pass on to the Route Timing agent."""\n\n    # Ensure the itinerary is confirmed, if not, back to the Planner agent to confirm it with the customer\n    if not context_variables["itinerary_confirmed"]:\n        return SwarmResult(\n            agent="planner_agent",\n            values="Itinerary not confirmed, please confirm the itinerary with the customer first.",\n        )\n\n    context_variables["structured_itinerary"] = structured_itinerary\n\n    # This will update the context variables and then transfer to the Route Timing agent\n    return SwarmResult(\n        agent="route_timing_agent", context_variables=context_variables, values="Structured itinerary stored."\n    )\n'})}),"\n",(0,r.jsx)(n.h3,{id:"agents",children:"Agents"}),"\n",(0,r.jsx)(n.p,{children:"Our SwarmAgents and a UserProxyAgent (human) which the swarm will\ninteract with."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Planner agent, interacting with the customer and GraphRag agent, to create an itinerary\nplanner_agent = SwarmAgent(\n    name="planner_agent",\n    system_message="You are a trip planner agent. It is important to know where the customer is going, how many days, what they want to do."\n    + "You will work with another agent, graphrag_agent, to get information about restaurant and attractions. "\n    + "You are also working with the customer, so you must ask the customer what they want to do if you don\u2019t have LOCATION, NUMBER OF DAYS, MEALS, and ATTRACTIONS. "\n    + "When you have the customer\'s requirements, work with graphrag_agent to get information for an itinerary."\n    + "You are responsible for creating the itinerary and for each day in the itinerary you MUST HAVE events and EACH EVENT MUST HAVE a \'type\' (\'Restaurant\' or \'Attraction\'), \'location\' (name of restaurant or attraction), \'city\', and \'description\'. "\n    + "Finally, YOU MUST ask the customer if they are happy with the itinerary before marking the itinerary as complete.",\n    functions=[mark_itinerary_as_complete],\n    llm_config=llm_config,\n)\n\n# FalkorDB GraphRAG agent, utilising the FalkorDB to gather data for the Planner agent\ngraphrag_agent = SwarmAgent(\n    name="graphrag_agent",\n    system_message="Return a list of restaurants and/or attractions. List them separately and provide ALL the options in the location. Do not provide travel advice.",\n)\n\n# Adding the FalkorDB capability to the agent\ngraph_rag_capability = FalkorGraphRagCapability(query_engine)\ngraph_rag_capability.add_to_agent(graphrag_agent)\n\n# Structured Output agent, formatting the itinerary into a structured format through the response_format on the LLM Configuration\nstructured_config_list = copy.deepcopy(config_list)\nfor config in structured_config_list:\n    config["response_format"] = Itinerary\n\nstructured_output_agent = SwarmAgent(\n    name="structured_output_agent",\n    system_message="You are a data formatting agent, format the provided itinerary in the context below into the provided format.",\n    llm_config={"config_list": structured_config_list, "timeout": 120},\n    functions=[create_structured_itinerary],\n)\n\n# Route Timing agent, adding estimated travel times to the itinerary by utilising the Google Maps Platform\nroute_timing_agent = SwarmAgent(\n    name="route_timing_agent",\n    system_message="You are a route timing agent. YOU MUST call the update_itinerary_with_travel_times tool if you do not see the exact phrase \'Timed itinerary added to context with travel times\' is seen in this conversation. Only after this please tell the customer \'Your itinerary is ready!\'.",\n    llm_config=llm_config,\n    functions=[update_itinerary_with_travel_times],\n)\n\n# Our customer will be a human in the loop\ncustomer = UserProxyAgent(name="customer")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"hand-offs-and-after-works",children:"Hand offs and After works"}),"\n",(0,r.jsx)(n.p,{children:"In conjunction with the agent\u2019s associated functions, we establish rules\nthat govern the swarm orchestration through hand offs and After works."}),"\n",(0,r.jsxs)(n.p,{children:["For more details on the swarm orchestration, ",(0,r.jsx)(n.a,{href:"https://ag2ai.github.io/ag2/docs/topics/swarm",children:"see the\ndocumentation"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'planner_agent.register_hand_off(\n    hand_to=[\n        ON_CONDITION(\n            graphrag_agent,\n            "Need information on the restaurants and attractions for a location. DO NOT call more than once at a time.",\n        ),  # Get info from FalkorDB GraphRAG\n        ON_CONDITION(structured_output_agent, "Itinerary is confirmed by the customer"),\n        AFTER_WORK(AfterWorkOption.REVERT_TO_USER),  # Revert to the customer for more information on their plans\n    ]\n)\n\n\n# Back to the Planner when information has been retrieved\ngraphrag_agent.register_hand_off(hand_to=[AFTER_WORK(planner_agent)])\n\n# Once we have formatted our itinerary, we can hand off to the route timing agent to add in the travel timings\nstructured_output_agent.register_hand_off(hand_to=[AFTER_WORK(route_timing_agent)])\n\n# Finally, once the route timing agent has finished, we can terminate the swarm\nroute_timing_agent.register_hand_off(\n    hand_to=[AFTER_WORK(AfterWorkOption.TERMINATE)]  # Once this agent has finished, the swarm can terminate\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"run-the-swarm",children:"Run the swarm"}),"\n",(0,r.jsx)(n.p,{children:"Let\u2019s get an itinerary for a couple of days in Rome."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Start the conversation\n\nchat_result, context_variables, last_agent = initiate_swarm_chat(\n    initial_agent=planner_agent,\n    agents=[planner_agent, graphrag_agent, structured_output_agent, route_timing_agent],\n    user_agent=customer,\n    context_variables=trip_context,\n    messages="I want to go to Rome for a couple of days. Can you help me plan my trip?",\n    after_work=AfterWorkOption.TERMINATE,\n    max_rounds=100,\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"bonus-itinerary-output",children:"Bonus itinerary output"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def print_itinerary(itinerary_data):\n    header = "\u2588             \u2588\\n \u2588           \u2588 \\n  \u2588  \u2588\u2588\u2588\u2588\u2588  \u2588  \\n   \u2588\u2588     \u2588\u2588   \\n  \u2588         \u2588  \\n \u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588 \\n \u2588 \u2588\u2588 \u2588\u2588\u2588 \u2588\u2588 \u2588 \\n   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \\n\\n \u2588\u2588   \u2588\u2588\u2588 \u2588\u2588\u2588  \\n\u2588  \u2588 \u2588       \u2588 \\n\u2588\u2588\u2588\u2588 \u2588 \u2588\u2588  \u2588\u2588  \\n\u2588  \u2588 \u2588  \u2588 \u2588    \\n\u2588  \u2588  \u2588\u2588  \u2588\u2588\u2588\u2588 \\n"\n    width = 80\n    icons = {"Travel": "\ud83d\udeb6", "Restaurant": "\ud83c\udf7d\ufe0f", "Attraction": "\ud83c\udfdb\ufe0f"}\n\n    for line in header.split("\\n"):\n        print(line.center(width))\n    print(f"Itinerary for {itinerary_data[\'days\'][0][\'events\'][0][\'city\']}".center(width))\n    print("=" * width)\n\n    for day_num, day in enumerate(itinerary_data["days"], 1):\n        print(f"\\nDay {day_num}".center(width))\n        print("-" * width)\n\n        for event in day["events"]:\n            event_type = event["type"]\n            print(f"\\n  {icons[event_type]} {event[\'location\']}")\n            if event_type != "Travel":\n                words = event["description"].split()\n                line = "    "\n                for word in words:\n                    if len(line) + len(word) + 1 <= 76:\n                        line += word + " "\n                    else:\n                        print(line)\n                        line = "    " + word + " "\n                if line.strip():\n                    print(line)\n            else:\n                print(f"    {event[\'description\']}")\n        print("\\n" + "-" * width)\n\n\nif "timed_itinerary" in context_variables:\n    print_itinerary(context_variables["timed_itinerary"])\nelse:\n    print("No itinerary available to print.")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"review-falkordb-graph",children:"Review FalkorDB Graph"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["UI endpoint: ",(0,r.jsx)(n.a,{href:"http://localhost:3000/graph",children:"http://localhost:3000/graph"})]}),"\n",(0,r.jsxs)(n.li,{children:["sample query: ",(0,r.jsx)(n.code,{children:"match path = ()-[]-() return path"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["NOTE: Based on current LLM issues the ",(0,r.jsx)(n.code,{children:"trip_data"})," graph is actually\nempty\u2026"]}),"\n",(0,r.jsxs)("figure",{children:[(0,r.jsx)("img",{src:"agentchat_swarm_graphrag_telemetry_trip_planner_files/figure-markdown_strict/cell-42-1-image.png",alt:"FalkorDB Graph Visualization"}),(0,r.jsx)("figcaption",{"aria-hidden":"true",children:"FalkorDB Graph Visualization"})]}),"\n",(0,r.jsx)(n.h2,{id:"review-arize-phoenix-telemetry-info",children:"Review Arize Phoenix Telemetry Info"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["UI endpoint: ",(0,r.jsx)(n.a,{href:"http://localhost:6006",children:"http://localhost:6006"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"card-view",children:"Card View"}),"\n",(0,r.jsxs)("figure",{children:[(0,r.jsx)("img",{src:"agentchat_swarm_graphrag_telemetry_trip_planner_files/figure-markdown_strict/cell-45-1-image-2.png",alt:"arize phoenix - card view"}),(0,r.jsx)("figcaption",{"aria-hidden":"true",children:"arize phoenix - card view"})]}),"\n",(0,r.jsx)(n.h3,{id:"list-view",children:"List View"}),"\n",(0,r.jsxs)("figure",{children:[(0,r.jsx)("img",{src:"agentchat_swarm_graphrag_telemetry_trip_planner_files/figure-markdown_strict/cell-47-1-image-2.png",alt:"Arize Phoenix - List View"}),(0,r.jsx)("figcaption",{"aria-hidden":"true",children:"Arize Phoenix - List View"})]}),"\n",(0,r.jsx)(n.h3,{id:"detail-view---route-timing-agent---llm-error",children:"Detail View - Route Timing Agent - LLM error"}),"\n",(0,r.jsx)(n.p,{children:"NOTE: this was based on LLM issues at the time of the test. A key reason\nwhy telemetry information is so valuable."}),"\n",(0,r.jsxs)("figure",{children:[(0,r.jsx)("img",{src:"agentchat_swarm_graphrag_telemetry_trip_planner_files/figure-markdown_strict/cell-49-1-image-2.png",alt:"Arize Phoenix = Entity Extraction Error"}),(0,r.jsx)("figcaption",{"aria-hidden":"true",children:"Arize Phoenix = Entity Extraction\nError"})]}),"\n",(0,r.jsx)(n.h3,{id:"detail-view---route-timing-agent---working-normally",children:"Detail View - Route Timing Agent - working normally"}),"\n",(0,r.jsxs)("figure",{children:[(0,r.jsx)("img",{src:"agentchat_swarm_graphrag_telemetry_trip_planner_files/figure-markdown_strict/cell-51-1-image.png",alt:"Detail View - Entity Extraction"}),(0,r.jsx)("figcaption",{"aria-hidden":"true",children:"Detail View - Entity\nExtraction"})]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var r=t(96540);const a={},i=r.createContext(a);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);